function(set_output_directory DIRECTORY)
    # First for the generic no-config case (e.g. with mingw)
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${DIRECTORY} PARENT_SCOPE)
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${DIRECTORY} PARENT_SCOPE)
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${DIRECTORY} PARENT_SCOPE)
    # Second, for multi-config builds (e.g. msvc)
    foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${DIRECTORY} PARENT_SCOPE)
        set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${DIRECTORY} PARENT_SCOPE)
        set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${DIRECTORY} PARENT_SCOPE)
    endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
endfunction()

function(ENVIRONMENT _ret)
    if(MINGW)
        set(${_ret} "windows-mingw" PARENT_SCOPE)
    elseif(CYGWIN)
        set(${_ret} "windows-cygnus" PARENT_SCOPE)
    elseif(WIN32)
        set(${_ret} "windows-win32" PARENT_SCOPE)
    elseif(UNIX)
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(${_ret} "apple-darwin" PARENT_SCOPE)
        else()
            set(${_ret} "linux" PARENT_SCOPE)
        endif()
    else()
        set(${_ret} "Unknown" PARENT_SCOPE)
    endif()
endfunction()

function(__COMPUTE_COMPILER_VERSION_GNULIKE _ret)
	if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
		EXECUTE_PROCESS( COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE version_string_full )
		string (REGEX REPLACE ".*clang version ([0-9]+\\.[0-9]+).*" "\\1" version_string ${version_string_full})
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		EXECUTE_PROCESS( COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE version_string)
		string (REGEX REPLACE "([0-9])\\.([0-9])\\.([0-9])" "\\1.\\2.\\3" version_string ${version_string})
    string(STRIP ${version_string} version_string) #Remove extra newline character
	endif()

	set(${_ret} ${version_string} PARENT_SCOPE)
endfunction()

function(COMPILER_VERSION _ret)
	if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel"
      OR CMAKE_CXX_COMPILER MATCHES "icl"
      OR CMAKE_CXX_COMPILER MATCHES "icpc")
    set (__version "")
  elseif (MSVC14)
    set(__version "14.0")
  elseif (MSVC12)
    set(__version "12.0")
  elseif (MSVC11)
    set(__version "11.0")
  elseif (MSVC10)
    set(__version "10.0")
  elseif (MSVC90)
    set(__version "9.0")
  elseif (MSVC80)
    set(__version "8.0")
  elseif (MSVC71)
    set(__version "7.1")
  elseif (MSVC70) # Good luck! (That's from Kitware, but I'm not sure here at biicode we support VC6.0 and 7.0 too. So good luck from the hive too!)
    set(__version "7.0") # yes, this is correct
  elseif (MSVC60) # Good luck!
    set(__version "6.0") # yes, this is correct
  elseif (BORLAND)
    set(__version "")
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "SunPro")
    set(__version "")
  else()
    __COMPUTE_COMPILER_VERSION_GNULIKE(__version)
  endif()
  set(${_ret} ${__version} PARENT_SCOPE)
endfunction()

function(BII_BOOST_COMPUTE_TOOLSET _ret)
	if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel"
      OR CMAKE_CXX_COMPILER MATCHES "icl"
      OR CMAKE_CXX_COMPILER MATCHES "icpc")
		set(__toolset_name "intel")
	elseif(MSVC)
		set(__toolset_name "msvc")
	elseif(BORLAND)
		set(__toolset_name "borland")
	elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
		set(__toolset_name "clang")
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		set(__toolset_name "gcc")
	else()
		message(FATAL_ERROR "Unknown compiler, unable to compute toolset")
	endif()

	COMPILER_VERSION(__version)

    if(__version AND (NOT (CMAKE_SYSTEM_NAME MATCHES "Darwin")))
		set(${_ret} "${__toolset_name}-${__version}" PARENT_SCOPE)
	else()
		set(${_ret} "${__toolset_name}"              PARENT_SCOPE)
	endif()
endfunction()
