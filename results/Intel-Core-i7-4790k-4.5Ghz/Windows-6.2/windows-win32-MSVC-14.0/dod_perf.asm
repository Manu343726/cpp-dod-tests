; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\Manu343726\Documents\joaquin-dod\dod_perf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
PUBLIC	?pause_timing@@YAXXZ				; pause_timing
PUBLIC	?resume_timing@@YAXXZ				; resume_timing
PUBLIC	?do_render@@YAXHHD@Z				; do_render
PUBLIC	?render@@YAHPAD0PAH1@Z				; render
PUBLIC	?render@@YAHPADPAH1I@Z				; render
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reallocate
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z ; std::allocator<plain_particle>::allocate
PUBLIC	??1?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ ; std::vector<plain_particle,std::allocator<plain_particle> >::~vector<plain_particle,std::allocator<plain_particle> >
PUBLIC	?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reallocate
PUBLIC	?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
PUBLIC	??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@0@@Z ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >
PUBLIC	??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@0@@Z ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >
PUBLIC	??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > > >
PUBLIC	??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@I@Z ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
PUBLIC	??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@I@Z ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
PUBLIC	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
PUBLIC	??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@I@Z ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
PUBLIC	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
PUBLIC	??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@I@Z ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
PUBLIC	??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@Z ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >,unsigned int>
PUBLIC	??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@I@Z ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
PUBLIC	??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@I@Z ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
PUBLIC	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,unsigned int>
PUBLIC	??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@I@Z ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
PUBLIC	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,unsigned int>
PUBLIC	??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@I@Z ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
PUBLIC	??$_Deallocate@H@std@@YAXPAHI@Z			; std::_Deallocate<int>
PUBLIC	??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
PUBLIC	??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
PUBLIC	??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
PUBLIC	??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
PUBLIC	??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
PUBLIC	??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
PUBLIC	??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
PUBLIC	??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
PUBLIC	??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
PUBLIC	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
PUBLIC	??$_Unguarded_partition@PANU?$less@X@std@@@std@@YA?AU?$pair@PANPAN@0@PAN0U?$less@X@0@@Z ; std::_Unguarded_partition<double *,std::less<void> >
PUBLIC	??$_Median@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z ; std::_Median<double *,std::less<void> >
PUBLIC	??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z ; std::_Make_heap<double *,int,double,std::less<void> >
PUBLIC	??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ; std::_Sort_heap<double *,std::less<void> >
PUBLIC	??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z ; std::_Insertion_sort1<double *,std::less<void>,double>
PUBLIC	??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ; std::_Adjust_heap<double *,int,double,std::less<void> >
PUBLIC	?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB ; `std::chrono::steady_clock::now'::`2'::_Freq
PUBLIC	?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A ; measure_start
PUBLIC	?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A ; measure_pause
PUBLIC	??_C@_07INEOAPOI@render?3?$AA@			; `string'
PUBLIC	??_C@_0DM@HCPGPFHC@n?$DLoop?$DLraw?$DLdod?$DLrender_dod?$DLoop?$FLi?$FN?$DL@ ; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
PUBLIC	?res@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA ; `measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
PUBLIC	?res@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA ; `measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_4bb02fb8e2d5361150321278473362ff> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
PUBLIC	?res@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA ; `measure<<lambda_4bb02fb8e2d5361150321278473362ff> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
PUBLIC	?res@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA ; `measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
PUBLIC	?res@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA ; `measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_a29049cf6153b725a6a331d7121b9876> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
PUBLIC	?res@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA ; `measure<<lambda_a29049cf6153b725a6a331d7121b9876> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_668201fb256ca3039b30842ebf04ef83> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
PUBLIC	?res@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA ; `measure<<lambda_668201fb256ca3039b30842ebf04ef83> >'::`2'::res
PUBLIC	?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B ; `measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >'::`2'::min_time_per_trial
PUBLIC	?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
PUBLIC	?res@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA ; `measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >'::`2'::res
PUBLIC	__real@4018000000000000
PUBLIC	__real@416312d000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp___Query_perf_counter:PROC
EXTRN	__imp___Query_perf_frequency:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__alldvrm:PROC
EXTRN	__allmul:PROC
EXTRN	__ltod3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB
_BSS	SEGMENT
?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB DQ 01H DUP (?) ; `std::chrono::steady_clock::now'::`2'::_Freq
_BSS	ENDS
;	COMDAT ?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
_BSS	ENDS
_BSS	SEGMENT
?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A DQ 01H DUP (?) ; measure_start
?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A DQ 01H DUP (?) ; measure_pause
?render_output@@3HA DD 01H DUP (?)			; render_output
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_4bb02fb8e2d5361150321278473362ff> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_4bb02fb8e2d5361150321278473362ff> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_a29049cf6153b725a6a331d7121b9876> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_a29049cf6153b725a6a331d7121b9876> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_668201fb256ca3039b30842ebf04ef83> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_668201fb256ca3039b30842ebf04ef83> >'::`2'::res
_BSS	ENDS
;	COMDAT ?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
_BSS	SEGMENT
?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B DQ 01H DUP (?) ; `measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >'::`2'::min_time_per_trial
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
_BSS	ENDS
;	COMDAT ?res@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA
_BSS	SEGMENT
?res@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA DD 01H DUP (?) ; `measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >'::`2'::res
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@416312d000000000
CONST	SEGMENT
__real@416312d000000000 DQ 0416312d000000000r	; 1e+07
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HCPGPFHC@n?$DLoop?$DLraw?$DLdod?$DLrender_dod?$DLoop?$FLi?$FN?$DL@
CONST	SEGMENT
??_C@_0DM@HCPGPFHC@n?$DLoop?$DLraw?$DLdod?$DLrender_dod?$DLoop?$FLi?$FN?$DL@ DB 'n'
	DB	';oop;raw;dod;render_dod;oop[i];raw[i];dod[i];render_dod[i]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07INEOAPOI@render?3?$AA@
CONST	SEGMENT
??_C@_07INEOAPOI@render?3?$AA@ DB 'render:', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$10
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$_main DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
	DD	00H
	DD	FLAT:__unwindfunclet$_main$1
	DD	01H
	DD	FLAT:__unwindfunclet$_main$2
	DD	02H
	DD	FLAT:__unwindfunclet$_main$3
	DD	03H
	DD	FLAT:__unwindfunclet$_main$4
	DD	04H
	DD	FLAT:__unwindfunclet$_main$5
xdata$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PANHNU?$less@X@std@@@std@@YAXPAN00$$QANU?$less@X@0@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PANHNU?$less@X@std@@@std@@YAXPAN00$$QANU?$less@X@0@PAH@Z PROC ; std::_Pop_heap<double *,int,double,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2442
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
; Line 2443
	push	DWORD PTR __Pred$[esp-4]
	movsd	xmm0, QWORD PTR [ecx]
	push	DWORD PTR __Val$[esp]
	movsd	QWORD PTR [eax], xmm0
	mov	eax, DWORD PTR __Last$[esp+4]
	sub	eax, ecx
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	call	??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ; std::_Adjust_heap<double *,int,double,std::less<void> >
	add	esp, 20					; 00000014H
; Line 2445
	ret	0
??$_Pop_heap@PANHNU?$less@X@std@@@std@@YAXPAN00$$QANU?$less@X@0@PAH@Z ENDP ; std::_Pop_heap<double *,int,double,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward@PANPAN@std@@YAPANPAN00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PANPAN@std@@YAPANPAN00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<double *,double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 2633
	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
; Line 2634
	mov	esi, DWORD PTR __Dest$[esp]
	sub	ecx, eax
	and	ecx, -8					; fffffff8H
	push	ecx
	sub	esi, ecx
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 2636
	mov	eax, esi
	pop	esi
; Line 2637
	ret	0
??$_Move_backward@PANPAN@std@@YAPANPAN00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<double *,double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@NN@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAN0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@NN@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAN0@Z PROC ; std::_Ptr_cat<double,double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 640
	push	ecx
; Line 642
	mov	al, BYTE PTR __Cat$[esp+4]
; Line 643
	pop	ecx
	ret	0
??$_Ptr_cat@NN@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAN0@Z ENDP ; std::_Ptr_cat<double,double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PANNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@0@Z
_TEXT	SEGMENT
__Val$ = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PANNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@0@Z PROC ; std::_Pop_heap_0<double *,double,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2451
	sub	esp, 8
; Line 2452
	mov	ecx, DWORD PTR __Last$[esp+4]
; Line 2453
	lea	edx, DWORD PTR __Val$[esp+8]
	mov	eax, DWORD PTR __First$[esp+4]
	push	DWORD PTR __Pred$[esp+4]
	movsd	xmm0, QWORD PTR [ecx-8]
	movsd	QWORD PTR __Val$[esp+12], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx-8], xmm0
	sub	ecx, eax
	push	edx
	sub	ecx, 8
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ; std::_Adjust_heap<double *,int,double,std::less<void> >
; Line 2455
	add	esp, 28					; 0000001cH
	ret	0
??$_Pop_heap_0@PANNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@0@Z ENDP ; std::_Pop_heap_0<double *,double,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Push_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z PROC ; std::_Push_heap<double *,int,double,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2362
	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx
; Line 2363
	mov	ebx, DWORD PTR __Top$[esp]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, ecx
	jge	SHORT $LN18@Push_heap
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Val$[esp+8]
	npad	1
$LL4@Push_heap:
	movsd	xmm1, QWORD PTR [esi+eax*8]
	movsd	xmm0, QWORD PTR [edi]
	comisd	xmm0, xmm1
	jbe	SHORT $LN19@Push_heap
; Line 2366
	movsd	QWORD PTR [esi+ecx*8], xmm1
; Line 2367
	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, ecx
	jl	SHORT $LL4@Push_heap
$LN19@Push_heap:
; Line 2370
	movsd	xmm0, QWORD PTR [edi]
	pop	edi
	movsd	QWORD PTR [esi+ecx*8], xmm0
	pop	esi
	pop	ebx
; Line 2371
	ret	0
$LN18@Push_heap:
; Line 2370
	mov	eax, DWORD PTR __Val$[esp]
	pop	ebx
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR __First$[esp-4]
	movsd	QWORD PTR [eax+ecx*8], xmm0
; Line 2371
	ret	0
??$_Push_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ENDP ; std::_Push_heap<double *,int,double,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PANPAN@std@@YAPANPAN00@Z PROC		; std::_Move_backward<double *,double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 2644
	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	sub	ecx, eax
	and	ecx, -8					; fffffff8H
	push	ecx
	sub	esi, ecx
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	mov	eax, esi
	pop	esi
; Line 2646
	ret	0
??$_Move_backward@PANPAN@std@@YAPANPAN00@Z ENDP		; std::_Move_backward<double *,double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z PROC ; std::_Pop_heap<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2460
	sub	esp, 8
; Line 2461
	mov	ecx, DWORD PTR __Last$[esp+4]
	lea	edx, DWORD PTR __Val$1[esp+8]
	mov	eax, DWORD PTR __First$[esp+4]
	push	DWORD PTR __Pred$[esp+4]
	movsd	xmm0, QWORD PTR [ecx-8]
	movsd	QWORD PTR __Val$1[esp+12], xmm0
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx-8], xmm0
	sub	ecx, eax
	push	edx
	sub	ecx, 8
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ; std::_Adjust_heap<double *,int,double,std::less<void> >
; Line 2463
	add	esp, 28					; 0000001cH
	ret	0
??$_Pop_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ENDP ; std::_Pop_heap<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z PROC ; std::_Adjust_heap<double *,int,double,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2419
	mov	edx, DWORD PTR __Bottom$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Hole$[esp+4]
	mov	ebx, esi
	lea	eax, DWORD PTR [esi*2+2]
	cmp	eax, edx
	jge	SHORT $LN43@Adjust_hea
	npad	5
$LL4@Adjust_hea:
; Line 2421
	movsd	xmm0, QWORD PTR [ecx+eax*8-8]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN5@Adjust_hea
; Line 2422
	dec	eax
$LN5@Adjust_hea:
; Line 2423
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR [ecx+esi*8], xmm0
; Line 2424
	mov	esi, eax
	lea	eax, DWORD PTR [eax*2+2]
	cmp	eax, edx
	jl	SHORT $LL4@Adjust_hea
$LN43@Adjust_hea:
; Line 2427
	jne	SHORT $LN6@Adjust_hea
; Line 2429
	movsd	xmm0, QWORD PTR [ecx+edx*8-8]
	movsd	QWORD PTR [ecx+esi*8], xmm0
; Line 2430
	lea	esi, DWORD PTR [edx-1]
$LN6@Adjust_hea:
; Line 2432
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, esi
	jge	SHORT $LN40@Adjust_hea
	push	edi
	mov	edi, DWORD PTR __Val$[esp+8]
	npad	10
$LL22@Adjust_hea:
	movsd	xmm1, QWORD PTR [ecx+eax*8]
	movsd	xmm0, QWORD PTR [edi]
	comisd	xmm0, xmm1
	jbe	SHORT $LN41@Adjust_hea
	movsd	QWORD PTR [ecx+esi*8], xmm1
	mov	esi, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, esi
	jl	SHORT $LL22@Adjust_hea
$LN41@Adjust_hea:
	movsd	xmm0, QWORD PTR [edi]
	pop	edi
	movsd	QWORD PTR [ecx+esi*8], xmm0
	pop	esi
	pop	ebx
; Line 2433
	ret	0
$LN40@Adjust_hea:
; Line 2432
	mov	eax, DWORD PTR __Val$[esp+4]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx+esi*8], xmm0
	pop	esi
	pop	ebx
; Line 2433
	ret	0
??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ENDP ; std::_Adjust_heap<double *,int,double,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move@AAN@std@@YA$$QANAAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAN@std@@YA$$QANAAN@Z PROC			; std::_Move<double &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1318
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1319
	ret	0
??$_Move@AAN@std@@YA$$QANAAN@Z ENDP			; std::_Move<double &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@AAPAN@std@@YAAAPANAAPAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAN@std@@YAAAPANAAPAN@Z PROC		; std::forward<double * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@AAPAN@std@@YAAAPANAAPAN@Z ENDP		; std::forward<double * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@N@std@@YAXAAN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@N@std@@YAXAAN0@Z PROC				; std::swap<double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; Line 53
	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR __Left$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [ecx]
	movsd	QWORD PTR [ecx], xmm0
; Line 54
	movsd	QWORD PTR [eax], xmm1
; Line 55
	ret	0
??$swap@N@std@@YAXAAN0@Z ENDP				; std::swap<double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z PROC ; std::_Med3<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3080
	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [ecx]
	comisd	xmm1, xmm0
	jbe	SHORT $LN11@Med3
; Line 3081
	movsd	QWORD PTR [eax], xmm1
	movsd	QWORD PTR [ecx], xmm0
$LN11@Med3:
; Line 3082
	mov	edx, DWORD PTR __Last$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [edx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN43@Med3
; Line 3084
	movsd	QWORD PTR [edx], xmm0
	movsd	QWORD PTR [eax], xmm1
; Line 3085
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN43@Med3
; Line 3086
	movsd	QWORD PTR [eax], xmm0
	movsd	QWORD PTR [ecx], xmm1
$LN43@Med3:
; Line 3088
	ret	0
??$_Med3@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z ENDP ; std::_Med3<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z
_TEXT	SEGMENT
tv248 = -12						; size = 4
__Val$1$ = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z PROC ; std::_Insertion_sort1<double *,std::less<void>,double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3046
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 3047
	mov	ebx, DWORD PTR __Last$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[ebp]
	cmp	edi, ebx
	je	$LN3@Insertion_
; Line 3048
	lea	esi, DWORD PTR [edi+8]
	cmp	esi, ebx
	je	$LN3@Insertion_
	mov	eax, 8
	sub	eax, edi
	mov	DWORD PTR tv248[esp+24], eax
$LL2@Insertion_:
; Line 3051
	movsd	xmm1, QWORD PTR [esi]
	mov	ecx, esi
; Line 3053
	movsd	xmm0, QWORD PTR [edi]
	comisd	xmm0, xmm1
	movsd	QWORD PTR __Val$1$[esp+24], xmm1
	jbe	SHORT $LN9@Insertion_
; Line 3055
	add	eax, -8					; fffffff8H
	add	eax, esi
	sar	eax, 3
	lea	ecx, DWORD PTR [eax*8]
	mov	eax, esi
	push	ecx
	sub	eax, ecx
	add	eax, 8
	push	edi
	push	eax
	call	DWORD PTR __imp__memmove
; Line 3056
	movsd	xmm0, QWORD PTR __Val$1$[esp+36]
	add	esp, 12					; 0000000cH
	movsd	QWORD PTR [edi], xmm0
; Line 3058
	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:
; Line 3061
	movsd	xmm0, QWORD PTR [esi-8]
	lea	eax, DWORD PTR [esi-8]
	comisd	xmm0, xmm1
	jbe	SHORT $LN6@Insertion_
$LL7@Insertion_:
; Line 3063
	movsd	QWORD PTR [ecx], xmm0
	mov	ecx, eax
	movsd	xmm0, QWORD PTR [eax-8]
	sub	eax, 8
	comisd	xmm0, xmm1
	ja	SHORT $LL7@Insertion_
$LN6@Insertion_:
; Line 3064
	movsd	QWORD PTR [ecx], xmm1
$LN10@Insertion_:
; Line 3048
	mov	eax, DWORD PTR tv248[esp+24]
	add	esi, 8
	cmp	esi, ebx
	jne	SHORT $LL2@Insertion_
$LN3@Insertion_:
; Line 3067
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z ENDP ; std::_Insertion_sort1<double *,std::less<void>,double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z PROC ; std::_Sort_heap<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2523
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 2524
	mov	esi, DWORD PTR __Last$[ebp]
	push	edi
	mov	edi, DWORD PTR __First$[ebp]
	sub	esi, edi
	mov	eax, esi
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN3@Sort_heap
	mov	ebx, DWORD PTR __Pred$[ebp]
	npad	15
$LL4@Sort_heap:
; Line 2525
	movsd	xmm0, QWORD PTR [edi+esi-8]
	lea	eax, DWORD PTR __Val$1[esp+24]
	movsd	QWORD PTR __Val$1[esp+24], xmm0
	movsd	xmm0, QWORD PTR [edi]
	push	ebx
	push	eax
	movsd	QWORD PTR [edi+esi-8], xmm0
	add	esi, -8					; fffffff8H
	mov	eax, esi
	sar	eax, 3
	push	eax
	push	0
	push	edi
	call	??$_Adjust_heap@PANHNU?$less@X@std@@@std@@YAXPANHH$$QANU?$less@X@0@@Z ; std::_Adjust_heap<double *,int,double,std::less<void> >
	mov	eax, esi
	add	esp, 20					; 00000014H
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jge	SHORT $LL4@Sort_heap
$LN3@Sort_heap:
; Line 2526
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ENDP ; std::_Sort_heap<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z
_TEXT	SEGMENT
tv290 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z PROC ; std::_Make_heap<double *,int,double,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2488
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
; Line 2489
	mov	ecx, DWORD PTR __First$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, ecx
	sar	edi, 3
; Line 2490
	mov	eax, edi
	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	test	ebx, ebx
	jle	$LN3@Make_heap
; Line 2489
	lea	edx, DWORD PTR [ebx*2+2]
	npad	3
$LL2@Make_heap:
; Line 2493
	movsd	xmm1, QWORD PTR [ecx+ebx*8-8]
	dec	ebx
	sub	edx, 2
; Line 2494
	mov	esi, ebx
	mov	DWORD PTR tv290[esp+16], edx
	mov	eax, edx
	cmp	edx, edi
	jge	SHORT $LN14@Make_heap
	npad	10
$LL15@Make_heap:
	movsd	xmm0, QWORD PTR [ecx+eax*8-8]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN16@Make_heap
	dec	eax
$LN16@Make_heap:
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR [ecx+esi*8], xmm0
	mov	esi, eax
	lea	eax, DWORD PTR [eax*2+2]
	cmp	eax, edi
	jl	SHORT $LL15@Make_heap
$LN14@Make_heap:
	cmp	eax, edi
	jne	SHORT $LN17@Make_heap
	movsd	xmm0, QWORD PTR [ecx+edi*8-8]
	movsd	QWORD PTR [ecx+esi*8], xmm0
	lea	esi, DWORD PTR [edi-1]
$LN17@Make_heap:
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, esi
	jge	SHORT $LN55@Make_heap
$LL33@Make_heap:
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	comisd	xmm1, xmm0
	jbe	SHORT $LN55@Make_heap
	movsd	QWORD PTR [ecx+esi*8], xmm0
	mov	esi, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, esi
	jl	SHORT $LL33@Make_heap
$LN55@Make_heap:
; Line 2490
	mov	edx, DWORD PTR tv290[esp+16]
; Line 2494
	movsd	QWORD PTR [ecx+esi*8], xmm1
	test	ebx, ebx
	jg	$LL2@Make_heap
$LN3@Make_heap:
; Line 2497
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z ENDP ; std::_Make_heap<double *,int,double,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAN@std@@YAPANPAN@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAN@std@@YAPANPAN@Z PROC			; std::_Val_type<double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 875
	xor	eax, eax
; Line 876
	ret	0
??$_Val_type@PAN@std@@YAPANPAN@Z ENDP			; std::_Val_type<double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAN@std@@YAPAHPAN@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAN@std@@YAPAHPAN@Z PROC			; std::_Dist_type<double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 935
	xor	eax, eax
; Line 936
	ret	0
??$_Dist_type@PAN@std@@YAPAHPAN@Z ENDP			; std::_Dist_type<double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked@PAN@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAN@std@@YAPANPAN@Z PROC			; std::_Unchecked<double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 439
	mov	eax, DWORD PTR __Src$[esp-4]
; Line 440
	ret	0
??$_Unchecked@PAN@std@@YAPANPAN@Z ENDP			; std::_Unchecked<double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0AAPANAAPANX@?$pair@PANPAN@std@@QAE@AAPAN0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPANAAPANX@?$pair@PANPAN@std@@QAE@AAPAN0@Z PROC	; std::pair<double *,double *>::pair<double *,double *><double * &,double * &,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; Line 143
	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 144
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
; Line 146
	mov	eax, ecx
	ret	8
??$?0AAPANAAPANX@?$pair@PANPAN@std@@QAE@AAPAN0@Z ENDP	; std::pair<double *,double *>::pair<double *,double *><double * &,double * &,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PANPAN@std@@YAXPAN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PANPAN@std@@YAXPAN0@Z PROC			; std::iter_swap<double *,double *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; Line 28
	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR __Left$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [ecx]
	movsd	QWORD PTR [ecx], xmm0
	movsd	QWORD PTR [eax], xmm1
; Line 29
	ret	0
??$iter_swap@PANPAN@std@@YAXPAN0@Z ENDP			; std::iter_swap<double *,double *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z PROC		; std::less<void>::operator()<double &,double &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 327
	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR __Left$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
	xor	eax, eax
	comisd	xmm0, QWORD PTR [ecx]
	seta	al
; Line 329
	ret	8
??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z ENDP		; std::less<void>::operator()<double &,double &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z
_TEXT	SEGMENT
tv488 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z PROC ; std::_Median<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3093
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
; Line 3094
	mov	ecx, DWORD PTR __First$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	mov	eax, edi
; Line 3097
	movsd	xmm1, QWORD PTR [ecx]
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median
; Line 3096
	inc	eax
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
; Line 3097
	mov	ebx, eax
	shl	ebx, 4
	mov	DWORD PTR tv488[esp+16], ebx
	lea	edx, DWORD PTR [eax*8]
	movsd	xmm0, QWORD PTR [edx+ecx]
	comisd	xmm1, xmm0
	jbe	SHORT $LN15@Median
	movsd	QWORD PTR [edx+ecx], xmm1
	movsd	QWORD PTR [ecx], xmm0
$LN15@Median:
	movsd	xmm1, QWORD PTR [ebx+ecx]
	movsd	xmm0, QWORD PTR [edx+ecx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN47@Median
	movsd	QWORD PTR [ebx+ecx], xmm0
	movsd	QWORD PTR [edx+ecx], xmm1
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN47@Median
	movsd	QWORD PTR [edx+ecx], xmm0
	movsd	QWORD PTR [ecx], xmm1
$LN47@Median:
; Line 3098
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	esi, eax
	sub	esi, edx
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [esi]
	comisd	xmm1, xmm0
	jbe	SHORT $LN68@Median
	movsd	QWORD PTR [eax], xmm1
	movsd	QWORD PTR [esi], xmm0
$LN68@Median:
	movsd	xmm1, QWORD PTR [edx+eax]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, xmm1
	jbe	SHORT $LN100@Median
	movsd	QWORD PTR [edx+eax], xmm0
	movsd	QWORD PTR [eax], xmm1
	movsd	xmm0, QWORD PTR [esi]
	comisd	xmm0, xmm1
	jbe	SHORT $LN100@Median
	movsd	QWORD PTR [eax], xmm0
	movsd	QWORD PTR [esi], xmm1
$LN100@Median:
; Line 3099
	mov	esi, edi
	mov	ebx, edi
	sub	ebx, DWORD PTR tv488[esp+16]
	sub	esi, edx
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [ebx]
	comisd	xmm1, xmm0
	jbe	SHORT $LN121@Median
	movsd	QWORD PTR [esi], xmm1
	movsd	QWORD PTR [ebx], xmm0
$LN121@Median:
	movsd	xmm1, QWORD PTR [edi]
	movsd	xmm0, QWORD PTR [esi]
	comisd	xmm0, xmm1
	jbe	SHORT $LN153@Median
	movsd	QWORD PTR [edi], xmm0
	movsd	QWORD PTR [esi], xmm1
	movsd	xmm0, QWORD PTR [ebx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN153@Median
	movsd	QWORD PTR [esi], xmm0
	movsd	QWORD PTR [ebx], xmm1
$LN153@Median:
; Line 3100
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [edx+ecx]
	comisd	xmm1, xmm0
	jbe	SHORT $LN174@Median
	movsd	QWORD PTR [eax], xmm1
	movsd	QWORD PTR [edx+ecx], xmm0
$LN174@Median:
	movsd	xmm1, QWORD PTR [esi]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, xmm1
	jbe	SHORT $LN259@Median
	movsd	QWORD PTR [esi], xmm0
	movsd	QWORD PTR [eax], xmm1
	movsd	xmm0, QWORD PTR [edx+ecx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN259@Median
	movsd	QWORD PTR [eax], xmm0
	movsd	QWORD PTR [edx+ecx], xmm1
; Line 3104
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@Median:
; Line 3103
	mov	eax, DWORD PTR __Mid$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm1, xmm0
	jbe	SHORT $LN227@Median
	movsd	QWORD PTR [eax], xmm1
	movsd	QWORD PTR [ecx], xmm0
$LN227@Median:
	movsd	xmm1, QWORD PTR [edi]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, xmm1
	jbe	SHORT $LN259@Median
	movsd	QWORD PTR [edi], xmm0
	movsd	QWORD PTR [eax], xmm1
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, xmm1
	jbe	SHORT $LN259@Median
	movsd	QWORD PTR [eax], xmm0
	movsd	QWORD PTR [ecx], xmm1
$LN259@Median:
; Line 3104
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z ENDP ; std::_Median<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?RAANAAN@?$plus@X@std@@QBENAAN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAANAAN@?$plus@X@std@@QBENAAN0@Z PROC		; std::plus<void>::operator()<double &,double &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 259
	mov	eax, DWORD PTR __Left$[esp-4]
	fld	QWORD PTR [eax]
	mov	eax, DWORD PTR __Right$[esp-4]
	fadd	QWORD PTR [eax]
; Line 261
	ret	8
??$?RAANAAN@?$plus@X@std@@QBENAAN0@Z ENDP		; std::plus<void>::operator()<double &,double &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z PROC ; std::_Insertion_sort<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3073
	push	0
	push	DWORD PTR __Pred$[esp]
	push	DWORD PTR __Last$[esp+4]
	push	DWORD PTR __First$[esp+8]
	call	??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z ; std::_Insertion_sort1<double *,std::less<void>,double>
	add	esp, 16					; 00000010H
; Line 3074
	ret	0
??$_Insertion_sort@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ENDP ; std::_Insertion_sort<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z PROC ; std::sort_heap<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2535
	push	DWORD PTR __Pred$[esp-4]
	push	DWORD PTR __Last$[esp]
	push	DWORD PTR __First$[esp+4]
	call	??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ; std::_Sort_heap<double *,std::less<void> >
	add	esp, 12					; 0000000cH
; Line 2536
	ret	0
??$sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ENDP ; std::sort_heap<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z PROC ; std::make_heap<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 2504
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, ecx
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN2@make_heap
; Line 2507
	push	0
	push	0
	push	DWORD PTR __Pred$[esp+4]
	push	ecx
	push	edx
	call	??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z ; std::_Make_heap<double *,int,double,std::less<void> >
	add	esp, 20					; 00000014H
$LN2@make_heap:
; Line 2510
	ret	0
??$make_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ENDP ; std::make_heap<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PANU?$less@X@std@@@std@@YA?AU?$pair@PANPAN@0@PAN0U?$less@X@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PANU?$less@X@std@@@std@@YA?AU?$pair@PANPAN@0@PAN0U?$less@X@0@@Z PROC ; std::_Unguarded_partition<double *,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3111
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, ecx
	push	ebx
	mov	ebx, DWORD PTR __First$[esp]
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	sar	eax, 1
	push	edi
; Line 3112
	push	DWORD PTR __Pred$[esp+8]
	lea	esi, DWORD PTR [ebx+eax*8]
	lea	eax, DWORD PTR [ecx-8]
	push	eax
	push	esi
	push	ebx
	call	??$_Median@PANU?$less@X@std@@@std@@YAXPAN00U?$less@X@0@@Z ; std::_Median<double *,std::less<void> >
	add	esp, 16					; 00000010H
; Line 3114
	lea	edi, DWORD PTR [esi+8]
; Line 3118
	cmp	ebx, esi
	jae	SHORT $LN181@Unguarded_
$LL2@Unguarded_:
	movsd	xmm1, QWORD PTR [esi-8]
	movsd	xmm0, QWORD PTR [esi]
	comisd	xmm0, xmm1
	ja	SHORT $LN181@Unguarded_
	comisd	xmm1, xmm0
	ja	SHORT $LN181@Unguarded_
; Line 3119
	add	esi, -8					; fffffff8H
	cmp	ebx, esi
	jb	SHORT $LL2@Unguarded_
$LN181@Unguarded_:
; Line 3122
	mov	ecx, DWORD PTR __Last$[esp+8]
	cmp	edi, ecx
	jae	SHORT $LN182@Unguarded_
	movsd	xmm1, QWORD PTR [esi]
	npad	5
$LL4@Unguarded_:
	movsd	xmm0, QWORD PTR [edi]
	comisd	xmm1, xmm0
	ja	SHORT $LN182@Unguarded_
	comisd	xmm0, xmm1
	ja	SHORT $LN182@Unguarded_
; Line 3123
	add	edi, 8
	cmp	edi, ecx
	jb	SHORT $LL4@Unguarded_
$LN182@Unguarded_:
; Line 3125
	mov	edx, edi
; Line 3126
	mov	ebx, esi
$LN186@Unguarded_:
	mov	eax, DWORD PTR __First$[esp+8]
	npad	1
$LL6@Unguarded_:
; Line 3130
	cmp	edx, ecx
	jae	SHORT $LN162@Unguarded_
$LL11@Unguarded_:
; Line 3131
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [edx]
	comisd	xmm1, xmm0
	ja	SHORT $LN9@Unguarded_
; Line 3133
	comisd	xmm0, xmm1
	ja	SHORT $LN183@Unguarded_
; Line 3135
	mov	eax, edi
	add	edi, 8
	cmp	eax, edx
	je	SHORT $LN9@Unguarded_
; Line 3136
	movsd	xmm0, QWORD PTR [edi-8]
	movsd	QWORD PTR [edi-8], xmm1
	movsd	QWORD PTR [edx], xmm0
$LN9@Unguarded_:
; Line 3130
	add	edx, 8
	cmp	edx, ecx
	jb	SHORT $LL11@Unguarded_
$LN183@Unguarded_:
	mov	eax, DWORD PTR __First$[esp+8]
$LN162@Unguarded_:
; Line 3137
	cmp	ebx, eax
	jbe	SHORT $LN185@Unguarded_
	lea	eax, DWORD PTR [ebx-8]
$LL14@Unguarded_:
; Line 3138
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [esi]
	comisd	xmm0, xmm1
	ja	SHORT $LN12@Unguarded_
; Line 3140
	comisd	xmm1, xmm0
	ja	SHORT $LN184@Unguarded_
; Line 3142
	sub	esi, 8
	cmp	esi, eax
	je	SHORT $LN12@Unguarded_
; Line 3143
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esi], xmm1
	movsd	QWORD PTR [eax], xmm0
$LN12@Unguarded_:
; Line 3137
	sub	ebx, 8
	sub	eax, 8
	cmp	DWORD PTR __First$[esp+8], ebx
	jb	SHORT $LL14@Unguarded_
$LN184@Unguarded_:
	mov	eax, DWORD PTR __First$[esp+8]
; Line 3144
	cmp	ebx, eax
$LN185@Unguarded_:
	jne	SHORT $LN26@Unguarded_
	cmp	edx, ecx
	je	$LN164@Unguarded_
; Line 3149
	cmp	edi, edx
	je	SHORT $LN89@Unguarded_
; Line 3150
	movsd	xmm0, QWORD PTR [edi]
	movsd	xmm1, QWORD PTR [esi]
	movsd	QWORD PTR [esi], xmm0
	movsd	QWORD PTR [edi], xmm1
$LN89@Unguarded_:
; Line 3152
	mov	ecx, edx
	mov	eax, esi
	add	edi, 8
	add	esi, 8
	add	edx, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [eax]
	movsd	QWORD PTR [eax], xmm0
	movsd	QWORD PTR [ecx], xmm1
	mov	ecx, DWORD PTR __Last$[esp+8]
	jmp	$LN186@Unguarded_
$LN26@Unguarded_:
; Line 3156
	sub	ebx, 8
	cmp	edx, ecx
	jne	SHORT $LN29@Unguarded_
	sub	esi, 8
	cmp	ebx, esi
	je	SHORT $LN117@Unguarded_
; Line 3157
	movsd	xmm0, QWORD PTR [esi]
	movsd	xmm1, QWORD PTR [ebx]
	movsd	QWORD PTR [ebx], xmm0
	movsd	QWORD PTR [esi], xmm1
$LN117@Unguarded_:
; Line 3158
	movsd	xmm0, QWORD PTR [edi-8]
	sub	edi, 8
	movsd	xmm1, QWORD PTR [esi]
	movsd	QWORD PTR [esi], xmm0
	movsd	QWORD PTR [edi], xmm1
; Line 3160
	jmp	$LL6@Unguarded_
$LN29@Unguarded_:
; Line 3161
	movsd	xmm1, QWORD PTR [edx]
	movsd	xmm0, QWORD PTR [ebx]
	movsd	QWORD PTR [edx], xmm0
	add	edx, 8
	movsd	QWORD PTR [ebx], xmm1
; Line 3162
	jmp	$LL6@Unguarded_
$LN164@Unguarded_:
; Line 3145
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx
; Line 3163
	ret	0
??$_Unguarded_partition@PANU?$less@X@std@@@std@@YA?AU?$pair@PANPAN@0@PAN0U?$less@X@0@@Z ENDP ; std::_Unguarded_partition<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$destroy@Vplain_particle@@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Vplain_particle@@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@@Z PROC ; std::allocator<plain_particle>::destroy<plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 665
	ret	4
??$destroy@Vplain_particle@@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@@Z ENDP ; std::allocator<plain_particle>::destroy<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Accumulate@PANNU?$plus@X@std@@@std@@YANPAN0NU?$plus@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 8
__Func$ = 24						; size = 1
??$_Accumulate@PANNU?$plus@X@std@@@std@@YANPAN0NU?$plus@X@0@@Z PROC ; std::_Accumulate<double *,double,std::plus<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric
; Line 18
	mov	ecx, DWORD PTR __First$[esp-4]
	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	sub	esi, ecx
	add	esi, 7
	shr	esi, 3
	push	edi
	xor	edi, edi
	cmp	ecx, DWORD PTR __Last$[esp+4]
	cmova	esi, edi
; Line 19
	test	esi, esi
	je	SHORT $LN14@Accumulate
	movsd	xmm1, QWORD PTR __Val$[esp+4]
$LL10@Accumulate:
; Line 20
	addsd	xmm1, QWORD PTR [ecx]
	inc	edx
	add	ecx, 8
	cmp	edx, esi
	jne	SHORT $LL10@Accumulate
	movsd	QWORD PTR __Val$[esp+4], xmm1
$LN14@Accumulate:
; Line 21
	fld	QWORD PTR __Val$[esp+4]
	pop	edi
	pop	esi
; Line 22
	ret	0
??$_Accumulate@PANNU?$plus@X@std@@@std@@YANPAN0NU?$plus@X@0@@Z ENDP ; std::_Accumulate<double *,double,std::plus<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z PROC ; std::_Sort<double *,int,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3169
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
; Line 3171
	mov	esi, DWORD PTR __Last$[esp+16]
	mov	eax, esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+20]
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN7@Sort
	mov	ebx, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL2@Sort:
	test	ebx, ebx
	jle	$LN3@Sort
; Line 3174
	push	DWORD PTR __Pred$[esp+20]
	lea	eax, DWORD PTR __Mid$1[esp+28]
	push	esi
	push	edi
	push	eax
	call	??$_Unguarded_partition@PANU?$less@X@std@@@std@@YA?AU?$pair@PANPAN@0@PAN0U?$less@X@0@@Z ; std::_Unguarded_partition<double *,std::less<void> >
; Line 3177
	mov	ebp, DWORD PTR __Mid$1[esp+44]
	mov	eax, ebx
	cdq
	add	esp, 16					; 00000010H
	sub	eax, edx
	mov	ecx, esi
	mov	ebx, eax
	sub	ecx, ebp
	sar	ebx, 1
	and	ecx, -8					; fffffff8H
; Line 3179
	push	DWORD PTR __Pred$[esp+20]
	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR __Mid$1[esp+28]
	sar	eax, 1
	add	ebx, eax
	mov	eax, edx
	sub	eax, edi
	and	eax, -8					; fffffff8H
	push	ebx
	cmp	eax, ecx
	jge	SHORT $LN5@Sort
	push	edx
	push	edi
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
; Line 3180
	mov	edi, ebp
; Line 3182
	jmp	SHORT $LN35@Sort
$LN5@Sort:
; Line 3184
	push	esi
	push	ebp
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
; Line 3185
	mov	esi, DWORD PTR __Mid$1[esp+40]
$LN35@Sort:
; Line 3184
	mov	eax, esi
	add	esp, 16					; 00000010H
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL2@Sort
$LN7@Sort:
; Line 3194
	cmp	eax, 2
	jl	SHORT $LN9@Sort
; Line 3195
	push	0
	push	DWORD PTR __Pred$[esp+24]
	push	esi
	push	edi
	call	??$_Insertion_sort1@PANU?$less@X@std@@N@std@@YAXPAN0U?$less@X@0@0@Z ; std::_Insertion_sort1<double *,std::less<void>,double>
	add	esp, 16					; 00000010H
$LN9@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3196
	add	esp, 8
	ret	0
$LN3@Sort:
; Line 3189
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN7@Sort
; Line 3191
	mov	eax, esi
	sub	eax, edi
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN12@Sort
	push	0
	push	0
	push	DWORD PTR __Pred$[esp+28]
	push	esi
	push	edi
	call	??$_Make_heap@PANHNU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@PAH0@Z ; std::_Make_heap<double *,int,double,std::less<void> >
	add	esp, 20					; 00000014H
$LN12@Sort:
; Line 3192
	push	DWORD PTR __Pred$[esp+20]
	push	esi
	push	edi
	call	??$_Sort_heap@PANU?$less@X@std@@@std@@YAXPAN0U?$less@X@0@@Z ; std::_Sort_heap<double *,std::less<void> >
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3196
	add	esp, 8
	ret	0
??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ENDP ; std::_Sort<double *,int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked@N$09@std@@YAPANV?$_Array_iterator@N$09@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@N$09@std@@YAPANV?$_Array_iterator@N$09@0@@Z PROC ; std::_Unchecked<double,10>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1902
	mov	eax, DWORD PTR __Iter$[esp-4]
; Line 1903
	ret	0
??$_Unchecked@N$09@std@@YAPANV?$_Array_iterator@N$09@0@@Z ENDP ; std::_Unchecked<double,10>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 553
	mov	eax, DWORD PTR __Dur$[esp-4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	__allmul
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], edx
; Line 566
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Addressof@N@std@@YAPANAANU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@N@std@@YAPANAANU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 692
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 695
	ret	0
??$_Addressof@N@std@@YAPANAANU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@DDD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@DDD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<char,char,char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 470
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	sub	esi, eax
; Line 471
	push	esi
	push	eax
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 473
	ret	0
??$_Uninit_move@DDD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<char,char,char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAD@std@@YAPADPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAD@std@@YAPADPAD@Z PROC			; std::_Val_type<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 875
	xor	eax, eax
; Line 876
	ret	0
??$_Val_type@PAD@std@@YAPADPAD@Z ENDP			; std::_Val_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 470
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	esi
; Line 471
	lea	esi, DWORD PTR [eax*4]
	push	esi
	push	ecx
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 473
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 875
	xor	eax, eax
; Line 876
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$destroy@Vplain_particle@@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@Vplain_particle@@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@@Z PROC ; std::allocator_traits<std::allocator<plain_particle> >::destroy<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 783
	ret	0
??$destroy@Vplain_particle@@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@@Z ENDP ; std::allocator_traits<std::allocator<plain_particle> >::destroy<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 442
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; Line 443
	test	eax, eax
	je	SHORT $LN2@Uninit_mov
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [eax], xmm0
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN2@Uninit_mov:
; Line 442
	add	ecx, 20					; 00000014H
	add	eax, 20					; 00000014H
	cmp	ecx, esi
	jne	SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
	pop	esi
; Line 450
	ret	0
??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z PROC ; std::_Val_type<plain_particle *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 875
	xor	eax, eax
; Line 876
	ret	0
??$_Val_type@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z ENDP ; std::_Val_type<plain_particle *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$accumulate@V?$_Array_iterator@N$09@std@@NU?$plus@X@2@@std@@YANV?$_Array_iterator@N$09@0@0NU?$plus@X@0@@Z
_TEXT	SEGMENT
__Val$ = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 8
__Func$ = 24						; size = 1
??$accumulate@V?$_Array_iterator@N$09@std@@NU?$plus@X@2@@std@@YANV?$_Array_iterator@N$09@0@0NU?$plus@X@0@@Z PROC ; std::accumulate<std::_Array_iterator<double,10>,double,std::plus<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric
; Line 28
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
; Line 30
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	movsd	xmm1, QWORD PTR __Val$[ebp]
	push	esi
	mov	esi, DWORD PTR __Last$[ebp]
	sub	esi, ecx
	movsd	QWORD PTR __Val$[esp+12], xmm1
	add	esi, 7
	shr	esi, 3
	push	edi
	xor	edi, edi
	cmp	ecx, DWORD PTR __Last$[ebp]
	cmova	esi, edi
	test	esi, esi
	je	SHORT $LN28@accumulate
$LL24@accumulate:
	addsd	xmm1, QWORD PTR [ecx]
	inc	edx
	add	ecx, 8
	cmp	edx, esi
	jne	SHORT $LL24@accumulate
	movsd	QWORD PTR __Val$[esp+16], xmm1
$LN28@accumulate:
	fld	QWORD PTR __Val$[esp+16]
; Line 31
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$accumulate@V?$_Array_iterator@N$09@std@@NU?$plus@X@2@@std@@YANV?$_Array_iterator@N$09@0@0NU?$plus@X@0@@Z ENDP ; std::accumulate<std::_Array_iterator<double,10>,double,std::plus<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@V?$_Array_iterator@N$09@std@@U?$less@X@2@@std@@YAXV?$_Array_iterator@N$09@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Array_iterator@N$09@std@@U?$less@X@2@@std@@YAXV?$_Array_iterator@N$09@0@0U?$less@X@0@@Z PROC ; std::sort<std::_Array_iterator<double,10>,std::less<void> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3204
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, ecx
	mov	eax, DWORD PTR __First$[esp-4]
	sub	edx, eax
	push	DWORD PTR __Pred$[esp-4]
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	add	esp, 16					; 00000010H
; Line 3205
	ret	0
??$sort@V?$_Array_iterator@N$09@std@@U?$less@X@2@@std@@YAXV?$_Array_iterator@N$09@0@0U?$less@X@0@@Z ENDP ; std::sort<std::_Array_iterator<double,10>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0NX@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QAE@ABN@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$?0NX@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QAE@ABN@Z PROC ; std::chrono::duration<double,std::ratio<1,1> >::duration<double,std::ratio<1,1> ><double,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 112
	mov	eax, DWORD PTR __Val$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
; Line 114
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	4
??$?0NX@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QAE@ABN@Z ENDP ; std::chrono::duration<double,std::ratio<1,1> >::duration<double,std::ratio<1,1> ><double,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0_JU?$ratio@$00$0DOI@@std@@X@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@@Z
_TEXT	SEGMENT
__Dur$ = 8						; size = 4
??$?0_JU?$ratio@$00$0DOI@@std@@X@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000>,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 125
	mov	eax, DWORD PTR __Dur$[esp-4]
	push	esi
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR [eax+4]
; Line 126
	mov	esi, ecx
	push	DWORD PTR [eax]
	call	__allmul
	mov	DWORD PTR [esi], eax
; Line 127
	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	ret	4
??$?0_JU?$ratio@$00$0DOI@@std@@X@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000>,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PAHPAH@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAE@$$QAPAH0@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
??$?0PAHPAH@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAE@$$QAPAH0@Z PROC ; dod::access<dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,2>,dod::member<int,3> ><int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
; Line 101
	mov	eax, ecx
	ret	8
??$?0PAHPAH@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAE@$$QAPAH0@Z ENDP ; dod::access<dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,2>,dod::member<int,3> ><int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z PROC ; boost::iterators::iterator_core_access::increment<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 546
	mov	eax, DWORD PTR _f$[esp-4]
	inc	DWORD PTR [eax]
	add	DWORD PTR [eax+4], 4
	add	DWORD PTR [eax+8], 4
	add	DWORD PTR [eax+12], 4
	add	DWORD PTR [eax+16], 4
; Line 547
	ret	0
??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z ENDP ; boost::iterators::iterator_core_access::increment<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z PROC ; boost::iterators::iterator_core_access::increment<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 546
	mov	eax, DWORD PTR _f$[esp-4]
	inc	DWORD PTR [eax]
	add	DWORD PTR [eax+4], 4
	add	DWORD PTR [eax+8], 4
; Line 547
	ret	0
??$increment@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z ENDP ; boost::iterators::iterator_core_access::increment<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@N@std@@YAPANAAN@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@N@std@@YAPANAAN@Z PROC			; std::addressof<double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 700
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 701
	ret	0
??$addressof@N@std@@YAPANAAN@Z ENDP			; std::addressof<double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ
_TEXT	SEGMENT
??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ PROC ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::operator particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > &, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\core\addressof.hpp
; Line 30
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ ENDP ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::operator particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > &
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z PROC ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\core\addressof.hpp
; Line 29
	mov	eax, DWORD PTR _v$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z ENDP ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV4@J@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
___formal$ = 12						; size = 4
?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV4@J@Z PROC ; boost::detail::addressof_impl<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::f, COMDAT
; File c:\mingw\include\boost\core\addressof.hpp
; Line 40
	mov	eax, DWORD PTR _v$[esp-4]
; Line 42
	ret	0
?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV4@J@Z ENDP ; boost::detail::addressof_impl<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ
_TEXT	SEGMENT
??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ PROC ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::operator particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > &, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\core\addressof.hpp
; Line 30
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QBEAAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ ENDP ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::operator particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > &
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z PROC ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\core\addressof.hpp
; Line 29
	mov	eax, DWORD PTR _v$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$addr_impl_ref@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@QAE@AAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z ENDP ; boost::detail::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::addr_impl_ref<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV4@J@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
___formal$ = 12						; size = 4
?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV4@J@Z PROC ; boost::detail::addressof_impl<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::f, COMDAT
; File c:\mingw\include\boost\core\addressof.hpp
; Line 40
	mov	eax, DWORD PTR _v$[esp-4]
; Line 42
	ret	0
?f@?$addressof_impl@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@detail@boost@@SAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV4@J@Z ENDP ; boost::detail::addressof_impl<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z PROC	; std::_Rechecked<char *,char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 447
	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	ecx, DWORD PTR __Src$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 449
	ret	0
??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z ENDP	; std::_Rechecked<char *,char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Uninit_move<char *,char *,std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 481
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	sub	esi, eax
	push	esi
	push	eax
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 483
	ret	0
??$_Uninit_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Uninit_move<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked@PAD@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAD@std@@YAPADPAD@Z PROC			; std::_Unchecked<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 439
	mov	eax, DWORD PTR __Src$[esp-4]
; Line 440
	ret	0
??$_Unchecked@PAD@std@@YAPADPAD@Z ENDP			; std::_Unchecked<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 447
	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	ecx, DWORD PTR __Src$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 449
	ret	0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 481
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	esi
	lea	esi, DWORD PTR [eax*4]
	push	esi
	push	ecx
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 483
	ret	0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 439
	mov	eax, DWORD PTR __Src$[esp-4]
; Line 440
	ret	0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$destroy@Vplain_particle@@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Vplain_particle@@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::destroy<plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 928
	ret	4
??$destroy@Vplain_particle@@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::destroy<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Rechecked@PAVplain_particle@@PAV1@@std@@YAAAPAVplain_particle@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVplain_particle@@PAV1@@std@@YAAAPAVplain_particle@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<plain_particle *,plain_particle *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 447
	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	ecx, DWORD PTR __Src$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 449
	ret	0
??$_Rechecked@PAVplain_particle@@PAV1@@std@@YAAAPAVplain_particle@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<plain_particle *,plain_particle *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z PROC ; std::_Uninit_move<plain_particle *,plain_particle *,std::_Wrap_alloc<std::allocator<plain_particle> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 480
	push	ecx
; Line 481
	push	DWORD PTR __Cat$1[esp+4]
	push	0
	push	DWORD PTR __Al$[esp+8]
	push	DWORD PTR __Dest$[esp+12]
	push	DWORD PTR __Last$[esp+16]
	push	DWORD PTR __First$[esp+20]
	call	??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
; Line 483
	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z ENDP ; std::_Uninit_move<plain_particle *,plain_particle *,std::_Wrap_alloc<std::allocator<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z PROC ; std::_Unchecked<plain_particle *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 439
	mov	eax, DWORD PTR __Src$[esp-4]
; Line 440
	ret	0
??$_Unchecked@PAVplain_particle@@@std@@YAPAVplain_particle@@PAV1@@Z ENDP ; std::_Unchecked<plain_particle *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DABD@?$allocator@D@std@@QAEXPADABD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@DABD@?$allocator@D@std@@QAEXPADABD@Z PROC	; std::allocator<char>::construct<char,char const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 657
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN3@construct:
; Line 658
	ret	8
??$construct@DABD@?$allocator@D@std@@QAEXPADABD@Z ENDP	; std::allocator<char>::construct<char,char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DAAD@?$allocator@D@std@@QAEXPADAAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@DAAD@?$allocator@D@std@@QAEXPADAAD@Z PROC	; std::allocator<char>::construct<char,char &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 657
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN3@construct:
; Line 658
	ret	8
??$construct@DAAD@?$allocator@D@std@@QAEXPADAAD@Z ENDP	; std::allocator<char>::construct<char,char &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z PROC	; std::allocator<int>::construct<int,int const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 657
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:
; Line 658
	ret	8
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z ENDP	; std::allocator<int>::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int,int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 657
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:
; Line 658
	ret	8
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@Vplain_particle@@V1@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Vplain_particle@@V1@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z PROC ; std::allocator<plain_particle>::construct<plain_particle,plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 657
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
$LN3@construct:
; Line 658
	ret	8
??$construct@Vplain_particle@@V1@@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z ENDP ; std::allocator<plain_particle>::construct<plain_particle,plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z
_TEXT	SEGMENT
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
___formal$ = 16						; size = 1
??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z PROC ; boost::iterators::iterator_core_access::equal<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 558
	mov	eax, DWORD PTR _f1$[esp-4]
	mov	ecx, DWORD PTR _f2$[esp-4]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 559
	ret	0
??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z ENDP ; boost::iterators::iterator_core_access::equal<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z
_TEXT	SEGMENT
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
___formal$ = 16						; size = 1
??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z PROC ; boost::iterators::iterator_core_access::equal<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 558
	mov	eax, DWORD PTR _f1$[esp-4]
	mov	ecx, DWORD PTR _f2$[esp-4]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 559
	ret	0
??$equal@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V12@@iterator_core_access@iterators@boost@@CA_NABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0U?$bool_@$00@mpl@2@@Z ENDP ; boost::iterators::iterator_core_access::equal<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$accumulate@V?$_Array_iterator@N$09@std@@N@std@@YANV?$_Array_iterator@N$09@0@0N@Z
_TEXT	SEGMENT
__Val$ = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 8
??$accumulate@V?$_Array_iterator@N$09@std@@N@std@@YANV?$_Array_iterator@N$09@0@0N@Z PROC ; std::accumulate<std::_Array_iterator<double,10>,double>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric
; Line 37
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
; Line 38
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	movsd	xmm0, QWORD PTR __Val$[ebp]
	push	esi
	mov	esi, DWORD PTR __Last$[ebp]
	sub	esi, ecx
	movsd	QWORD PTR __Val$[esp+12], xmm0
	add	esi, 7
	shr	esi, 3
	push	edi
	xor	edi, edi
	cmp	ecx, DWORD PTR __Last$[ebp]
	cmova	esi, edi
	test	esi, esi
	je	SHORT $LN30@accumulate
$LL26@accumulate:
	addsd	xmm0, QWORD PTR [ecx]
	inc	edx
	add	ecx, 8
	cmp	edx, esi
	jne	SHORT $LL26@accumulate
	movsd	QWORD PTR __Val$[esp+16], xmm0
$LN30@accumulate:
	fld	QWORD PTR __Val$[esp+16]
; Line 39
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$accumulate@V?$_Array_iterator@N$09@std@@N@std@@YANV?$_Array_iterator@N$09@0@0N@Z ENDP ; std::accumulate<std::_Array_iterator<double,10>,double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@V?$_Array_iterator@N$09@std@@@std@@YAXV?$_Array_iterator@N$09@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T1 = 12						; size = 1
__Last$ = 12						; size = 4
??$sort@V?$_Array_iterator@N$09@std@@@std@@YAXV?$_Array_iterator@N$09@0@0@Z PROC ; std::sort<std::_Array_iterator<double,10> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; Line 3211
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, ecx
	mov	eax, DWORD PTR __First$[esp-4]
	sub	edx, eax
	push	DWORD PTR $T1[esp-4]
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	add	esp, 16					; 00000010H
; Line 3212
	ret	0
??$sort@V?$_Array_iterator@N$09@std@@@std@@YAXV?$_Array_iterator@N$09@0@0@Z ENDP ; std::sort<std::_Array_iterator<double,10> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Array_iterator@N$09@std@@QBEHABV?$_Array_const_iterator@N$09@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Array_iterator@N$09@std@@QBEHABV?$_Array_const_iterator@N$09@1@@Z PROC ; std::_Array_iterator<double,10>::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1888
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
; Line 1889
	ret	4
??G?$_Array_iterator@N$09@std@@QBEHABV?$_Array_const_iterator@N$09@1@@Z ENDP ; std::_Array_iterator<double,10>::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Array_iterator@N$09@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Array_iterator@N$09@std@@QBE?AV01@H@Z PROC	; std::_Array_iterator<double,10>::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1883
	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	shl	eax, 3
	sub	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 1884
	ret	8
??G?$_Array_iterator@N$09@std@@QBE?AV01@H@Z ENDP	; std::_Array_iterator<double,10>::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Z?$_Array_iterator@N$09@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Array_iterator@N$09@std@@QAEAAV01@H@Z PROC	; std::_Array_iterator<double,10>::operator-=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1877
	mov	eax, DWORD PTR __Off$[esp-4]
	neg	eax
	shl	eax, 3
	add	DWORD PTR [ecx], eax
	mov	eax, ecx
; Line 1878
	ret	4
??Z?$_Array_iterator@N$09@std@@QAEAAV01@H@Z ENDP	; std::_Array_iterator<double,10>::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Array_iterator@N$09@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Array_iterator@N$09@std@@QBE?AV01@H@Z PROC	; std::_Array_iterator<double,10>::operator+, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1872
	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 1873
	ret	8
??H?$_Array_iterator@N$09@std@@QBE?AV01@H@Z ENDP	; std::_Array_iterator<double,10>::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Array_iterator@N$09@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Array_iterator@N$09@std@@QAEAAV01@H@Z PROC	; std::_Array_iterator<double,10>::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1865
	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 3
	add	DWORD PTR [ecx], eax
; Line 1866
	mov	eax, ecx
; Line 1867
	ret	4
??Y?$_Array_iterator@N$09@std@@QAEAAV01@H@Z ENDP	; std::_Array_iterator<double,10>::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unchecked@?$_Array_iterator@N$09@std@@QBEPANXZ
_TEXT	SEGMENT
?_Unchecked@?$_Array_iterator@N$09@std@@QBEPANXZ PROC	; std::_Array_iterator<double,10>::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1824
	mov	eax, DWORD PTR [ecx]
; Line 1825
	ret	0
?_Unchecked@?$_Array_iterator@N$09@std@@QBEPANXZ ENDP	; std::_Array_iterator<double,10>::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Array_iterator@N$09@std@@QAE@PANI@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_iterator@N$09@std@@QAE@PANI@Z PROC		; std::_Array_iterator<double,10>::_Array_iterator<double,10>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1810
	mov	edx, DWORD PTR __Off$[esp-4]
	mov	eax, DWORD PTR __Parg$[esp-4]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR [ecx], eax
; Line 1812
	mov	eax, ecx
	ret	8
??0?$_Array_iterator@N$09@std@@QAE@PANI@Z ENDP		; std::_Array_iterator<double,10>::_Array_iterator<double,10>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Array_const_iterator@N$09@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Array_const_iterator@N$09@std@@QBEHABV01@@Z PROC	; std::_Array_const_iterator<double,10>::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1517
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
; Line 1518
	ret	4
??G?$_Array_const_iterator@N$09@std@@QBEHABV01@@Z ENDP	; std::_Array_const_iterator<double,10>::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Array_const_iterator@N$09@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Array_const_iterator@N$09@std@@QAEAAV01@H@Z PROC	; std::_Array_const_iterator<double,10>::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1494
	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 3
	add	DWORD PTR [ecx], eax
; Line 1495
	mov	eax, ecx
; Line 1496
	ret	4
??Y?$_Array_const_iterator@N$09@std@@QAEAAV01@H@Z ENDP	; std::_Array_const_iterator<double,10>::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unchecked@?$_Array_const_iterator@N$09@std@@QBEPBNXZ
_TEXT	SEGMENT
?_Unchecked@?$_Array_const_iterator@N$09@std@@QBEPBNXZ PROC ; std::_Array_const_iterator<double,10>::_Unchecked, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1453
	mov	eax, DWORD PTR [ecx]
; Line 1454
	ret	0
?_Unchecked@?$_Array_const_iterator@N$09@std@@QBEPBNXZ ENDP ; std::_Array_const_iterator<double,10>::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Array_const_iterator@N$09@std@@QAE@PBNI@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_const_iterator@N$09@std@@QAE@PBNI@Z PROC	; std::_Array_const_iterator<double,10>::_Array_const_iterator<double,10>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 1440
	mov	edx, DWORD PTR __Off$[esp-4]
	mov	eax, DWORD PTR __Parg$[esp-4]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR [ecx], eax
; Line 1441
	mov	eax, ecx
	ret	8
??0?$_Array_const_iterator@N$09@std@@QAE@PBNI@Z ENDP	; std::_Array_const_iterator<double,10>::_Array_const_iterator<double,10>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
_TEXT	SEGMENT
tv174 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<double,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 548
	sub	esp, 8
; Line 553
	mov	ecx, DWORD PTR __Dur$[esp+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	call	__ltod3
	xor	edx, edx
	movsd	QWORD PTR tv174[esp+8], xmm0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	xmm1, QWORD PTR tv174[esp+8]
	divsd	xmm1, xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	movsd	QWORD PTR [eax], xmm1
; Line 566
	add	esp, 8
	ret	0
??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<double,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?M_JU?$ratio@$00$0DLJKMKAA@@std@@_JU?$ratio@$00$0DOI@@1@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?M_JU?$ratio@$00$0DLJKMKAA@@std@@_JU?$ratio@$00$0DOI@@1@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z PROC ; std::chrono::operator<<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 505
	mov	eax, DWORD PTR __Left$[esp-4]
	push	esi
	push	edi
	push	0
	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Right$[esp+8]
	push	1000000					; 000f4240H
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	__allmul
	cmp	esi, edx
	jg	SHORT $LN3@operator
	jl	SHORT $LN37@operator
	cmp	edi, eax
	jae	SHORT $LN3@operator
$LN37@operator:
	pop	edi
	mov	al, 1
	pop	esi
; Line 506
	ret	0
$LN3@operator:
	pop	edi
; Line 505
	xor	al, al
	pop	esi
; Line 506
	ret	0
??$?M_JU?$ratio@$00$0DLJKMKAA@@std@@_JU?$ratio@$00$0DOI@@1@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z ENDP ; std::chrono::operator<<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@N$09@std@@QAEAANI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$array@N$09@std@@QAEAANI@Z PROC			; std::array<double,10>::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\array
; Line 159
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*8]
; Line 160
	ret	4
??A?$array@N$09@std@@QAEAANI@Z ENDP			; std::array<double,10>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$array@N$09@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$array@N$09@std@@QBEIXZ PROC			; std::array<double,10>::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\array
; Line 120
	mov	eax, 10					; 0000000aH
; Line 121
	ret	0
?size@?$array@N$09@std@@QBEIXZ ENDP			; std::array<double,10>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ PROC ; std::array<double,10>::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\array
; Line 70
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR [eax], ecx
; Line 71
	ret	4
?end@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ ENDP ; std::array<double,10>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ PROC ; std::array<double,10>::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\array
; Line 60
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 61
	ret	4
?begin@?$array@N$09@std@@QAE?AV?$_Array_iterator@N$09@2@XZ ENDP ; std::array<double,10>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0HX@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$?0HX@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABH@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 112
	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	DWORD PTR [ecx], eax
; Line 114
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], edx
	ret	4
??$?0HX@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABH@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PAHPAHPAH@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH00@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
??$?0PAHPAHPAH@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH00@Z PROC ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><int *,int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<args_1>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
; Line 101
	mov	eax, ecx
	ret	12					; 0000000cH
??$?0PAHPAHPAH@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH00@Z ENDP ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><int *,int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z PROC ; boost::iterators::iterator_core_access::dereference<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 540
	mov	ecx, DWORD PTR _f$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
; Line 541
	ret	0
??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@Z ENDP ; boost::iterators::iterator_core_access::dereference<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z PROC ; boost::iterators::iterator_core_access::dereference<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 540
	mov	ecx, DWORD PTR _f$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 541
	ret	0
??$dereference@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CA?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@Z ENDP ; boost::iterators::iterator_core_access::dereference<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pointer_to@?$pointer_traits@PAVplain_particle@@@std@@SAPAVplain_particle@@AAV3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAVplain_particle@@@std@@SAPAVplain_particle@@AAV3@@Z PROC ; std::pointer_traits<plain_particle *>::pointer_to, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 317
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 318
	ret	0
?pointer_to@?$pointer_traits@PAVplain_particle@@@std@@SAPAVplain_particle@@AAV3@@Z ENDP ; std::pointer_traits<plain_particle *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_n$ = 12						; size = 4
??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z PROC ; boost::iterators::iterator_core_access::advance<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 570
	mov	ecx, DWORD PTR _f$[esp-4]
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	add	DWORD PTR [ecx+12], eax
	add	DWORD PTR [ecx+16], eax
; Line 571
	ret	0
??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z ENDP ; boost::iterators::iterator_core_access::advance<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV1@@Z PROC ; boost::addressof<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >, COMDAT
; File c:\mingw\include\boost\core\addressof.hpp
; Line 116
	mov	eax, DWORD PTR _v$[esp-4]
; Line 119
	ret	0
??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@AAV1@@Z ENDP ; boost::addressof<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_n$ = 12						; size = 4
??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z PROC ; boost::iterators::iterator_core_access::advance<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 570
	mov	ecx, DWORD PTR _f$[esp-4]
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
; Line 571
	ret	0
??$advance@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@iterator_core_access@iterators@boost@@CAXAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z ENDP ; boost::iterators::iterator_core_access::advance<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV1@@Z PROC ; boost::addressof<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >, COMDAT
; File c:\mingw\include\boost\core\addressof.hpp
; Line 116
	mov	eax, DWORD PTR _v$[esp-4]
; Line 119
	ret	0
??$addressof@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@boost@@YAPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@AAV1@@Z ENDP ; boost::addressof<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 180
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z PROC ; std::_Ptr_cat<char,char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 640
	push	ecx
; Line 642
	mov	al, BYTE PTR __Cat$[esp+4]
; Line 643
	pop	ecx
	ret	0
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ENDP ; std::_Ptr_cat<char,char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninitialized_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Uninitialized_move<char *,char *,std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 491
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	sub	esi, eax
	push	esi
	push	eax
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 494
	ret	0
??$_Uninitialized_move@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Uninitialized_move<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 180
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 640
	push	ecx
; Line 642
	mov	al, BYTE PTR __Cat$[esp+4]
; Line 643
	pop	ecx
	ret	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 491
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	esi
	lea	esi, DWORD PTR [eax*4]
	push	esi
	push	ecx
	push	DWORD PTR __Dest$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 494
	ret	0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<plain_particle> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 173
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@Vplain_particle@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVplain_particle@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@Vplain_particle@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVplain_particle@@0@Z PROC ; std::_Ptr_cat<plain_particle,plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 640
	push	ecx
; Line 642
	mov	al, BYTE PTR __Cat$[esp+4]
; Line 643
	pop	ecx
	ret	0
??$_Ptr_cat@Vplain_particle@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVplain_particle@@0@Z ENDP ; std::_Ptr_cat<plain_particle,plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninitialized_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z PROC ; std::_Uninitialized_move<plain_particle *,plain_particle *,std::_Wrap_alloc<std::allocator<plain_particle> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; Line 491
	push	DWORD PTR __Cat$1[esp-4]
	push	0
	push	DWORD PTR __Al$[esp+4]
	push	DWORD PTR __Dest$[esp+8]
	push	DWORD PTR __Last$[esp+12]
	push	DWORD PTR __First$[esp+16]
	call	??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
	add	esp, 24					; 00000018H
; Line 494
	ret	0
??$_Uninitialized_move@PAVplain_particle@@PAV1@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<plain_particle *,plain_particle *,std::_Wrap_alloc<std::allocator<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z PROC ; std::forward<std::allocator<int> const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ENDP ; std::forward<std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@ABV?$allocator@Vplain_particle@@@std@@@std@@YAABV?$allocator@Vplain_particle@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@Vplain_particle@@@std@@@std@@YAABV?$allocator@Vplain_particle@@@0@ABV10@@Z PROC ; std::forward<std::allocator<plain_particle> const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@ABV?$allocator@Vplain_particle@@@std@@@std@@YAABV?$allocator@Vplain_particle@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<plain_particle> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DABD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADABD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@DABD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADABD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char,char const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 775
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN8@construct:
; Line 776
	ret	0
??$construct@DABD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADABD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char,char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@ABD@std@@YAABDABD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABD@std@@YAABDABD@Z PROC			; std::forward<char const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@ABD@std@@YAABDABD@Z ENDP			; std::forward<char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DAAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADAAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@DAAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADAAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char,char &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 775
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN8@construct:
; Line 776
	ret	0
??$construct@DAAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PADAAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char,char &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@AAD@std@@YAAADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAD@std@@YAAADAAD@Z PROC			; std::forward<char &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@AAD@std@@YAAADAAD@Z ENDP			; std::forward<char &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Addressof@$$CBD@std@@YAPBDABDU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBD@std@@YAPBDABDU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<char const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 692
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 695
	ret	0
??$_Addressof@$$CBD@std@@YAPBDABDU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<char const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 775
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:
; Line 776
	ret	0
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 775
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:
; Line 776
	ret	0
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<int const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 692
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 695
	ret	0
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@Vplain_particle@@V1@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@$$QAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Vplain_particle@@V1@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@$$QAV3@@Z PROC ; std::allocator_traits<std::allocator<plain_particle> >::construct<plain_particle,plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 775
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
$LN8@construct:
; Line 776
	ret	0
??$construct@Vplain_particle@@V1@@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAXAAV?$allocator@Vplain_particle@@@1@PAVplain_particle@@$$QAV3@@Z ENDP ; std::allocator_traits<std::allocator<plain_particle> >::construct<plain_particle,plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 692
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 695
	ret	0
??$_Addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z
_TEXT	SEGMENT
_runs$1$ = -140						; size = 4
_i$1$ = -136						; size = 4
$T1 = -136						; size = 1
__Val$2 = -136						; size = 8
tv833 = -128						; size = 8
_tmp$3 = -116						; size = 12
$T4 = -104						; size = 8
$T5 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 16
??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z PROC ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+140], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+152], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv833[esp+152], xmm0
	npad	6
$LL5@measure:
; Line 27
	xor	eax, eax
	mov	DWORD PTR _runs$1$[esp+152], eax
; Line 30
	lea	eax, DWORD PTR $T4[esp+152]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
$LL8@measure:
; Line 32
	mov	ebx, DWORD PTR _f$[ebp+12]
	xor	edi, edi
	xor	esi, esi
	mov	DWORD PTR ?render_output@@3HA, edi
	test	ebx, ebx
	je	SHORT $LN24@measure
	movq	xmm0, QWORD PTR _f$[ebp]
	npad	7
$LL25@measure:
	mov	edx, DWORD PTR _f$[ebp+8]
	lea	eax, DWORD PTR [esi*4]
	add	edx, eax
	movq	QWORD PTR _tmp$3[esp+152], xmm0
	mov	ecx, DWORD PTR _tmp$3[esp+156]
	add	ecx, eax
	mov	eax, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [eax+esi]
	inc	esi
	add	eax, DWORD PTR [edx]
	add	eax, DWORD PTR [ecx]
	add	edi, eax
	cmp	esi, ebx
	jb	SHORT $LL25@measure
	mov	DWORD PTR ?render_output@@3HA, edi
$LN24@measure:
; Line 33
	inc	DWORD PTR _runs$1$[esp+152]
; Line 34
	lea	eax, DWORD PTR $T5[esp+152]
	push	eax
	mov	DWORD PTR ?res@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4HA, edi ; `measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >'::`2'::res
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	$LL8@measure
	jg	SHORT $LN293@measure
	cmp	edi, eax
	jb	$LL8@measure
$LN293@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv833[esp+152]
	mov	eax, DWORD PTR _runs$1$[esp+152]
	mov	ebx, DWORD PTR _i$1$[esp+152]
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+152], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+152], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+152]
	lea	eax, DWORD PTR _trials$[esp+236]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+164]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+184]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+216]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm1, xmm1
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+152], xmm1
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN267@measure
$LL282@measure:
	addsd	xmm1, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL282@measure
	movsd	QWORD PTR __Val$2[esp+152], xmm1
$LN267@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+152]
	fld	QWORD PTR __Val$2[esp+152]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z ENDP ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z
_TEXT	SEGMENT
_runs$1$ = -140						; size = 4
_i$1$ = -136						; size = 4
$T1 = -136						; size = 1
__Val$2 = -136						; size = 8
tv869 = -128						; size = 8
_tmp$3 = -120						; size = 20
$T4 = -100						; size = 8
$T5 = -92						; size = 8
_trials$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 24
??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z PROC ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+140], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_668201fb256ca3039b30842ebf04ef83>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+140], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	push	ebx
	push	ebp
	push	esi
	movsd	QWORD PTR tv869[esp+152], xmm0
	push	edi
$LL5@measure:
; Line 27
	xor	eax, eax
	mov	DWORD PTR _runs$1$[esp+156], eax
; Line 30
	lea	eax, DWORD PTR $T4[esp+156]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
	npad	8
$LL8@measure:
; Line 32
	mov	ebx, DWORD PTR _f$[esp+172]
	xor	edi, edi
	xor	esi, esi
	mov	DWORD PTR ?render_output@@3HA, edi
	test	ebx, ebx
	je	SHORT $LN24@measure
	movups	xmm0, XMMWORD PTR _f$[esp+152]
	npad	3
$LL25@measure:
	lea	ecx, DWORD PTR [esi*4]
	movups	XMMWORD PTR _tmp$3[esp+156], xmm0
	mov	edx, DWORD PTR _tmp$3[esp+160]
	mov	eax, DWORD PTR _tmp$3[esp+164]
	add	edx, ecx
	add	eax, ecx
	mov	ecx, DWORD PTR _f$[esp+152]
	movsx	ecx, BYTE PTR [ecx+esi]
	inc	esi
	add	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx]
	add	edi, ecx
	cmp	esi, ebx
	jb	SHORT $LL25@measure
	mov	DWORD PTR ?render_output@@3HA, edi
$LN24@measure:
; Line 33
	inc	DWORD PTR _runs$1$[esp+156]
; Line 34
	lea	eax, DWORD PTR $T5[esp+156]
	push	eax
	mov	DWORD PTR ?res@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4HA, edi ; `measure<<lambda_668201fb256ca3039b30842ebf04ef83> >'::`2'::res
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	mov	ebp, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sub	edi, ebp
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	$LL8@measure
	jg	SHORT $LN301@measure
	cmp	edi, eax
	jb	$LL8@measure
$LN301@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	sub	ecx, ebp
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv869[esp+156]
	mov	eax, DWORD PTR _runs$1$[esp+156]
	mov	ebx, DWORD PTR _i$1$[esp+156]
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+156], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+156], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+156]
	lea	eax, DWORD PTR _trials$[esp+240]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+168]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+188]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+220]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm1, xmm1
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+156], xmm1
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	pop	edi
	cmova	edx, ecx
	mov	ecx, esi
	pop	esi
	pop	ebp
	pop	ebx
	test	edx, edx
	je	SHORT $LN275@measure
$LL290@measure:
	addsd	xmm1, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL290@measure
	movsd	QWORD PTR __Val$2[esp+140], xmm1
$LN275@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+140]
	fld	QWORD PTR __Val$2[esp+140]
	xor	ecx, esp
	fdiv	QWORD PTR __real@4018000000000000
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	ret	0
??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z ENDP ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z
_TEXT	SEGMENT
_runs$1$ = -124						; size = 4
_i$1$ = -120						; size = 4
$T1 = -120						; size = 1
__Val$2 = -120						; size = 8
tv780 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 16
??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z PROC ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_a29049cf6153b725a6a331d7121b9876>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+136], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv780[esp+136], xmm0
$LL5@measure:
; Line 27
	xor	eax, eax
	mov	DWORD PTR _runs$1$[esp+136], eax
; Line 30
	lea	eax, DWORD PTR $T3[esp+136]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
$LL8@measure:
; Line 32
	mov	ebx, DWORD PTR _f$[ebp+12]
	xor	esi, esi
	xor	edx, edx
	mov	DWORD PTR ?render_output@@3HA, esi
	test	ebx, ebx
	je	SHORT $LN24@measure
	mov	edi, DWORD PTR _f$[ebp+4]
	mov	ecx, DWORD PTR _f$[ebp+8]
	sub	edi, ecx
$LL25@measure:
	mov	eax, DWORD PTR _f$[ebp]
	lea	ecx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [eax+edx]
	inc	edx
	add	eax, DWORD PTR [edi+ecx-4]
	add	eax, DWORD PTR [ecx-4]
	add	esi, eax
	cmp	edx, ebx
	jb	SHORT $LL25@measure
	mov	DWORD PTR ?render_output@@3HA, esi
$LN24@measure:
; Line 33
	inc	DWORD PTR _runs$1$[esp+136]
; Line 34
	lea	eax, DWORD PTR $T4[esp+136]
	push	eax
	mov	DWORD PTR ?res@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4HA, esi ; `measure<<lambda_a29049cf6153b725a6a331d7121b9876> >'::`2'::res
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	SHORT $LL8@measure
	jg	SHORT $LN251@measure
	cmp	edi, eax
	jb	$LL8@measure
$LN251@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv780[esp+136]
	mov	eax, DWORD PTR _runs$1$[esp+136]
	mov	ebx, DWORD PTR _i$1$[esp+136]
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+136], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+136], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+136]
	lea	eax, DWORD PTR _trials$[esp+220]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+148]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+168]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+200]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm0, xmm0
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+136], xmm0
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN225@measure
	npad	7
$LL240@measure:
	addsd	xmm0, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL240@measure
	movsd	QWORD PTR __Val$2[esp+136], xmm0
$LN225@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	fld	QWORD PTR __Val$2[esp+136]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z ENDP ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z
_TEXT	SEGMENT
_runs$1$ = -124						; size = 4
_i$1$ = -120						; size = 4
$T1 = -120						; size = 1
__Val$2 = -120						; size = 8
tv772 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 8
??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z PROC ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_ce14b79be95f650ececed4b3079e7cf8>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+136], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv772[esp+136], xmm0
$LL5@measure:
; Line 30
	lea	eax, DWORD PTR $T3[esp+136]
	xor	ebx, ebx
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
	jmp	SHORT $LN8@measure
$LN267@measure:
	mov	ebx, DWORD PTR _runs$1$[esp+136]
$LN8@measure:
; Line 32
	mov	esi, DWORD PTR _f$[ebp+4]
	xor	edx, edx
	mov	DWORD PTR ?render_output@@3HA, edx
	test	esi, esi
	je	SHORT $LN24@measure
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 4
	npad	2
$LL25@measure:
	movsx	eax, BYTE PTR [ecx-4]
	lea	ecx, DWORD PTR [ecx+20]
	add	eax, DWORD PTR [ecx-16]
	add	eax, DWORD PTR [ecx-20]
	add	edx, eax
	sub	esi, 1
	jne	SHORT $LL25@measure
	mov	DWORD PTR ?render_output@@3HA, edx
$LN24@measure:
; Line 34
	lea	eax, DWORD PTR $T4[esp+136]
	mov	DWORD PTR ?res@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4HA, edx ; `measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >'::`2'::res
	inc	ebx
	push	eax
	mov	DWORD PTR _runs$1$[esp+140], ebx
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	SHORT $LN267@measure
	jg	SHORT $LN265@measure
	cmp	edi, eax
	jb	$LN267@measure
$LN265@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv772[esp+136]
	mov	esi, DWORD PTR _i$1$[esp+136]
	movd	xmm1, DWORD PTR _runs$1$[esp+136]
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+esi*8+136], xmm0
	inc	esi
	mov	DWORD PTR _i$1$[esp+136], esi
	cmp	esi, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+136]
	lea	eax, DWORD PTR _trials$[esp+220]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+148]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+168]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+200]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm0, xmm0
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+136], xmm0
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN239@measure
$LL254@measure:
	addsd	xmm0, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL254@measure
	movsd	QWORD PTR __Val$2[esp+136], xmm0
$LN239@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	fld	QWORD PTR __Val$2[esp+136]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z ENDP ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z
_TEXT	SEGMENT
_runs$1$ = -124						; size = 4
_i$1$ = -120						; size = 4
$T1 = -120						; size = 1
__Val$2 = -120						; size = 8
tv592 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 24
??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z PROC ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+136], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv592[esp+136], xmm0
$LL5@measure:
; Line 30
	lea	eax, DWORD PTR $T3[esp+136]
	xor	esi, esi
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
$LL8@measure:
; Line 32
	movq	xmm0, QWORD PTR _f$[ebp+12]
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _f$[ebp+20]
	mov	ecx, esp
	sub	esp, 12					; 0000000cH
	movq	QWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, esp
	mov	eax, DWORD PTR _f$[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
	mov	DWORD PTR ?res@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4HA, eax ; `measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >'::`2'::res
; Line 33
	inc	esi
; Line 34
	lea	eax, DWORD PTR $T4[esp+160]
	mov	DWORD PTR _runs$1$[esp+160], esi
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 28					; 0000001cH
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	mov	esi, DWORD PTR _runs$1$[esp+136]
	jl	SHORT $LL8@measure
	jg	SHORT $LN240@measure
	cmp	edi, eax
	jb	SHORT $LL8@measure
$LN240@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv592[esp+136]
	mov	ebx, DWORD PTR _i$1$[esp+136]
	movd	xmm1, DWORD PTR _runs$1$[esp+136]
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+136], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+136], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+136]
	lea	eax, DWORD PTR _trials$[esp+220]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+148]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+168]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+200]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm0, xmm0
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+136], xmm0
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN218@measure
	npad	7
$LL231@measure:
	addsd	xmm0, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL231@measure
	movsd	QWORD PTR __Val$2[esp+136], xmm0
$LN218@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	fld	QWORD PTR __Val$2[esp+136]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z ENDP ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ
_TEXT	SEGMENT
??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::proxy::operator->, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 317
	mov	eax, ecx
	ret	0
??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::proxy::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::proxy::proxy, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 316
	mov	eax, DWORD PTR _x$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	4
??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::proxy::proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
___formal$ = 16						; size = 4
??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z PROC ; boost::iterators::operator++<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 787
	mov	edx, DWORD PTR _i$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+8]
; Line 789
	inc	DWORD PTR [edx]
	add	DWORD PTR [edx+4], 4
	add	DWORD PTR [edx+8], 4
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 792
	ret	0
??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z ENDP ; boost::iterators::operator++<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z PROC ; boost::iterators::operator!=<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 891
	mov	eax, DWORD PTR _lhs$[esp-4]
	mov	ecx, DWORD PTR _rhs$[esp-4]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setne	al
	ret	0
??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z ENDP ; boost::iterators::operator!=<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z
_TEXT	SEGMENT
_i$1$ = -116						; size = 4
$T1 = -116						; size = 1
__Val$2 = -116						; size = 8
tv592 = -108						; size = 8
$T3 = -100						; size = 8
$T4 = -92						; size = 8
_trials$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 40
??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z PROC ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+116], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	ebp
	push	esi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
	push	edi
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_4bb02fb8e2d5361150321278473362ff>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+132], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv592[esp+132], xmm0
	npad	1
$LL5@measure:
; Line 30
	lea	eax, DWORD PTR $T3[esp+132]
	xor	ebp, ebp
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
	npad	1
$LL8@measure:
; Line 32
	movups	xmm0, XMMWORD PTR _f$[esp+148]
	mov	eax, DWORD PTR _f$[esp+164]
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	sub	esp, 20					; 00000014H
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR _f$[esp+168]
	mov	eax, DWORD PTR _f$[esp+184]
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
	mov	DWORD PTR ?res@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4HA, eax ; `measure<<lambda_4bb02fb8e2d5361150321278473362ff> >'::`2'::res
; Line 33
	inc	ebp
; Line 34
	lea	eax, DWORD PTR $T4[esp+172]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 44					; 0000002cH
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	SHORT $LL8@measure
	jg	SHORT $LN240@measure
	cmp	edi, eax
	jb	$LL8@measure
$LN240@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv592[esp+132]
	mov	ebx, DWORD PTR _i$1$[esp+132]
	movd	xmm1, ebp
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+132], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+132], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+132]
	lea	eax, DWORD PTR _trials$[esp+216]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+144]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+164]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+196]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm0, xmm0
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+132], xmm0
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN218@measure
	npad	4
$LL231@measure:
	addsd	xmm0, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL231@measure
	movsd	QWORD PTR __Val$2[esp+132], xmm0
$LN218@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+132]
	fld	QWORD PTR __Val$2[esp+132]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	ret	0
??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z ENDP ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ
_TEXT	SEGMENT
??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::proxy::operator->, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 317
	mov	eax, ecx
	ret	0
??Cproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAEPAV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::proxy::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::proxy::proxy, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 316
	mov	eax, DWORD PTR _x$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, ecx
	ret	4
??0proxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@QAE@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::proxy::proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
___formal$ = 16						; size = 4
??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z PROC ; boost::iterators::operator++<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 787
	mov	edx, DWORD PTR _i$[esp-4]
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
; Line 789
	inc	DWORD PTR [edx]
	add	DWORD PTR [edx+4], 4
	add	DWORD PTR [edx+8], 4
	add	DWORD PTR [edx+12], 4
	add	DWORD PTR [edx+16], 4
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], eax
; Line 791
	mov	eax, ecx
; Line 792
	ret	0
??$?EV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z ENDP ; boost::iterators::operator++<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z PROC ; boost::iterators::operator!=<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 891
	mov	eax, DWORD PTR _lhs$[esp-4]
	mov	ecx, DWORD PTR _rhs$[esp-4]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setne	al
	ret	0
??$?9V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@HV01@V2@U345@V2@H@iterators@boost@@YA_NABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@0@Z ENDP ; boost::iterators::operator!=<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z
_TEXT	SEGMENT
_runs$1$ = -132						; size = 4
tv744 = -128						; size = 4
tv705 = -128						; size = 4
_i$1$ = -124						; size = 4
tv739 = -120						; size = 4
$T1 = -120						; size = 1
__Val$2 = -120						; size = 8
tv738 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 16
??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z PROC ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+132], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_0e8cd367240c9f8b6afbbc7d85139419>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+144], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv738[esp+144], xmm0
	npad	6
$LL5@measure:
; Line 27
	xor	eax, eax
	mov	DWORD PTR _runs$1$[esp+144], eax
; Line 30
	lea	eax, DWORD PTR $T3[esp+144]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
$LL8@measure:
; Line 32
	mov	esi, DWORD PTR _f$[ebp]
	xor	edi, edi
	mov	ecx, DWORD PTR _f$[ebp+4]
	xor	ebx, ebx
	mov	edx, DWORD PTR _f$[ebp+8]
	sub	ecx, esi
	cmp	esi, DWORD PTR _f$[ebp+4]
	mov	DWORD PTR ?render_output@@3HA, edi
	cmova	ecx, ebx
	mov	DWORD PTR tv744[esp+144], ecx
	test	ecx, ecx
	je	SHORT $LN24@measure
	mov	ecx, DWORD PTR _f$[ebp+12]
	sub	ecx, edx
	mov	DWORD PTR tv739[esp+144], ecx
	npad	1
$LL23@measure:
	mov	ecx, DWORD PTR [ecx+edx]
	lea	edx, DWORD PTR [edx+4]
	movsx	eax, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	add	ecx, eax
	inc	ebx
	add	ecx, DWORD PTR [edx-4]
	add	edi, ecx
	mov	ecx, DWORD PTR tv739[esp+144]
	cmp	ebx, DWORD PTR tv744[esp+144]
	jne	SHORT $LL23@measure
	mov	DWORD PTR ?render_output@@3HA, edi
$LN24@measure:
; Line 33
	inc	DWORD PTR _runs$1$[esp+144]
; Line 34
	lea	eax, DWORD PTR $T4[esp+144]
	push	eax
	mov	DWORD PTR ?res@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4HA, edi ; `measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >'::`2'::res
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	$LL8@measure
	jg	SHORT $LN250@measure
	cmp	edi, eax
	jb	$LL8@measure
$LN250@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv738[esp+144]
	mov	eax, DWORD PTR _runs$1$[esp+144]
	mov	ebx, DWORD PTR _i$1$[esp+144]
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+ebx*8+144], xmm0
	inc	ebx
	mov	DWORD PTR _i$1$[esp+144], ebx
	cmp	ebx, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+144]
	lea	eax, DWORD PTR _trials$[esp+228]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+156]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+176]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+208]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm1, xmm1
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+144], xmm1
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN224@measure
$LL239@measure:
	addsd	xmm1, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL239@measure
	movsd	QWORD PTR __Val$2[esp+144], xmm1
$LN224@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	fld	QWORD PTR __Val$2[esp+144]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z ENDP ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z
_TEXT	SEGMENT
_runs$1$ = -124						; size = 4
_i$1$ = -120						; size = 4
$T1 = -120						; size = 1
__Val$2 = -120						; size = 8
tv792 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
_trials$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 8
??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z PROC ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
; Line 22
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA, -1 ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
	jne	SHORT $LN2@measure
	push	OFFSET ?$TSS0@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA ; TSS0<`template-parameter-2',V<lambda_3c38aff788b9781cf78ca5a917f16ae4>::asure>
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B, 200 ; 000000c8H
	mov	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4, 0
	call	__Init_thread_footer
	add	esp, 4
$LN2@measure:
; Line 26
	xor	edx, edx
	mov	DWORD PTR _i$1$[esp+136], 0
	mov	ecx, 1000000000				; 3b9aca00H
	call	__ltod3
	movsd	QWORD PTR tv792[esp+136], xmm0
$LL5@measure:
; Line 30
	lea	eax, DWORD PTR $T3[esp+136]
	xor	ebx, ebx
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
	jmp	SHORT $LN8@measure
$LN285@measure:
	mov	ebx, DWORD PTR _runs$1$[esp+136]
$LN8@measure:
; Line 32
	mov	ecx, DWORD PTR _f$[ebp]
	xor	edi, edi
	mov	edx, DWORD PTR _f$[ebp+4]
	mov	DWORD PTR ?render_output@@3HA, edi
	cmp	ecx, edx
	je	SHORT $LN24@measure
	npad	5
$LL23@measure:
	mov	eax, ecx
	add	ecx, 20					; 00000014H
	mov	esi, DWORD PTR [eax+8]
	add	esi, DWORD PTR [eax+4]
	movsx	eax, BYTE PTR [eax]
	add	edi, eax
	add	edi, esi
	cmp	ecx, edx
	jne	SHORT $LL23@measure
	mov	DWORD PTR ?render_output@@3HA, edi
$LN24@measure:
; Line 34
	lea	eax, DWORD PTR $T4[esp+136]
	mov	DWORD PTR ?res@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4HA, edi ; `measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >'::`2'::res
	inc	ebx
	push	eax
	mov	DWORD PTR _runs$1$[esp+140], ebx
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	add	esp, 4
	mov	ebx, eax
; Line 35
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	push	0
	push	1000000					; 000f4240H
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B+4
	push	DWORD PTR ?min_time_per_trial@?1???$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z@4V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@B
	call	__allmul
	sub	edi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	sbb	esi, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	cmp	esi, edx
	jl	SHORT $LN285@measure
	jg	SHORT $LN283@measure
	cmp	edi, eax
	jb	$LN285@measure
$LN283@measure:
; Line 36
	mov	ecx, DWORD PTR [ebx]
	sub	ecx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	edx, DWORD PTR [ebx+4]
	sbb	edx, DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	call	__ltod3
	divsd	xmm0, QWORD PTR tv792[esp+136]
	mov	esi, DWORD PTR _i$1$[esp+136]
	movd	xmm1, DWORD PTR _runs$1$[esp+136]
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	QWORD PTR _trials$[esp+esi*8+136], xmm0
	inc	esi
	mov	DWORD PTR _i$1$[esp+136], esi
	cmp	esi, 10					; 0000000aH
	jl	$LL5@measure
; Line 40
	push	DWORD PTR $T1[esp+136]
	lea	eax, DWORD PTR _trials$[esp+220]
	push	10					; 0000000aH
	push	eax
	lea	eax, DWORD PTR _trials$[esp+148]
	push	eax
	call	??$_Sort@PANHU?$less@X@std@@@std@@YAXPAN0HU?$less@X@0@@Z ; std::_Sort<double *,int,std::less<void> >
	lea	esi, DWORD PTR _trials$[esp+168]
	add	esp, 16					; 00000010H
; Line 41
	lea	edi, DWORD PTR _trials$[esp+200]
	mov	ecx, esi
	mov	edx, edi
	xor	eax, eax
	sub	edx, ecx
	xorps	xmm1, xmm1
	add	edx, 7
	movsd	QWORD PTR __Val$2[esp+136], xmm1
	xor	ecx, ecx
	shr	edx, 3
	cmp	esi, edi
	cmova	edx, ecx
	mov	ecx, esi
	test	edx, edx
	je	SHORT $LN257@measure
$LL272@measure:
	addsd	xmm1, QWORD PTR [ecx]
	inc	eax
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL272@measure
	movsd	QWORD PTR __Val$2[esp+136], xmm1
$LN257@measure:
; Line 43
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	fld	QWORD PTR __Val$2[esp+136]
	fdiv	QWORD PTR __real@4018000000000000
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z ENDP ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAE@$$QAPAH0@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
??$?0PAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAE@$$QAPAH0@Z PROC ; dod::access<dod::member<int,0>,dod::member<int,1> >::access<dod::member<int,0>,dod::member<int,1> ><int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
; Line 101
	mov	eax, ecx
	ret	8
??$?0PAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAE@$$QAPAH0@Z ENDP ; dod::access<dod::member<int,0>,dod::member<int,1> >::access<dod::member<int,0>,dod::member<int,1> ><int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PAHPAHPAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH000@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
??$?0PAHPAHPAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH000@Z PROC ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><int *,int *,int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<args_1>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<args_2>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
; Line 101
	mov	eax, ecx
	ret	16					; 00000010H
??$?0PAHPAHPAHPAH@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAH000@Z ENDP ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><int *,int *,int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@PAH@std@@YA$$QAPAHAAPAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAH@std@@YA$$QAPAHAAPAH@Z PROC		; std::forward<int *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@PAH@std@@YA$$QAPAHAAPAH@Z ENDP		; std::forward<int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@PAD@std@@YA$$QAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAD@std@@YA$$QAPADAAPAD@Z PROC		; std::forward<char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@PAD@std@@YA$$QAPADAAPAD@Z ENDP		; std::forward<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z PROC ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 349
	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Right$[esp-4]
	sub	edx, DWORD PTR [eax]
	sbb	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 350
	ret	0
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ENDP ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
??$_Allocate@D@std@@YAPADIPAD_N@Z PROC			; std::_Allocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 57
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@Allocate
$LN1@Allocate:
; Line 93
	ret	0
$LN2@Allocate:
; Line 61
	cmp	eax, -1
	jbe	SHORT $LN3@Allocate
; Line 62
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:
; Line 67
	cmp	BYTE PTR __Try_aligned_allocation$[esp-4], 0
	je	SHORT $LN4@Allocate
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN4@Allocate
; Line 71
	lea	ecx, DWORD PTR [eax+35]
; Line 72
	cmp	ecx, eax
	ja	SHORT $LN6@Allocate
; Line 73
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:
; Line 75
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
; Line 76
	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:
; Line 77
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
; Line 79
	mov	DWORD PTR [eax-4], ecx
; Line 93
	ret	0
$LN4@Allocate:
; Line 89
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
; Line 90
	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate@D@std@@YAPADIPAD_N@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
??$_Allocate@H@std@@YAPAHIPAH_N@Z PROC			; std::_Allocate<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 57
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@Allocate
$LN1@Allocate:
; Line 93
	ret	0
$LN2@Allocate:
; Line 61
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN3@Allocate
; Line 62
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:
; Line 63
	shl	eax, 2
; Line 67
	cmp	BYTE PTR __Try_aligned_allocation$[esp-4], 0
	je	SHORT $LN4@Allocate
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN4@Allocate
; Line 71
	lea	ecx, DWORD PTR [eax+35]
; Line 72
	cmp	ecx, eax
	ja	SHORT $LN6@Allocate
; Line 73
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:
; Line 75
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
; Line 76
	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:
; Line 77
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
; Line 79
	mov	DWORD PTR [eax-4], ecx
; Line 93
	ret	0
$LN4@Allocate:
; Line 89
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
; Line 90
	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate@H@std@@YAPAHIPAH_N@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@Vplain_particle@@@std@@YAPAVplain_particle@@IPAV1@_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
??$_Allocate@Vplain_particle@@@std@@YAPAVplain_particle@@IPAV1@_N@Z PROC ; std::_Allocate<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 57
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN2@Allocate
$LN1@Allocate:
; Line 93
	ret	0
$LN2@Allocate:
; Line 61
	cmp	eax, 214748364				; 0cccccccH
	jbe	SHORT $LN3@Allocate
; Line 62
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:
; Line 63
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
; Line 67
	cmp	BYTE PTR __Try_aligned_allocation$[esp-4], 0
	je	SHORT $LN4@Allocate
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN4@Allocate
; Line 71
	lea	ecx, DWORD PTR [eax+35]
; Line 72
	cmp	ecx, eax
	ja	SHORT $LN6@Allocate
; Line 73
	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:
; Line 75
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
; Line 76
	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:
; Line 77
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
; Line 79
	mov	DWORD PTR [eax-4], ecx
; Line 93
	ret	0
$LN4@Allocate:
; Line 89
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
; Line 90
	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate@Vplain_particle@@@std@@YAPAVplain_particle@@IPAV1@_N@Z ENDP ; std::_Allocate<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Deallocate@D@std@@YAXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Deallocate@D@std@@YAXPADI@Z PROC			; std::_Deallocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 100
	mov	eax, DWORD PTR __Count$[esp-4]
	cmp	eax, -1
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:
; Line 102
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate
; Line 105
	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:
; Line 109
	mov	ecx, DWORD PTR [eax-4]
; Line 120
	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:
; Line 127
	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:
; Line 131
	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:
; Line 134
	mov	ecx, DWORD PTR __Ptr$[esp-4]
$LN3@Deallocate:
; Line 138
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
; Line 139
	ret	0
??$_Deallocate@D@std@@YAXPADI@Z ENDP			; std::_Deallocate<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Deallocate@H@std@@YAXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Deallocate@H@std@@YAXPAHI@Z PROC			; std::_Deallocate<int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 100
	mov	eax, DWORD PTR __Count$[esp-4]
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:
; Line 101
	shl	eax, 2
; Line 102
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate
; Line 105
	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:
; Line 109
	mov	ecx, DWORD PTR [eax-4]
; Line 120
	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:
; Line 127
	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:
; Line 131
	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:
; Line 134
	mov	ecx, DWORD PTR __Ptr$[esp-4]
$LN3@Deallocate:
; Line 138
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
; Line 139
	ret	0
??$_Deallocate@H@std@@YAXPAHI@Z ENDP			; std::_Deallocate<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z PROC ; std::_Deallocate<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 100
	mov	eax, DWORD PTR __Count$[esp-4]
	cmp	eax, 214748364				; 0cccccccH
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:
; Line 101
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
; Line 102
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate
; Line 105
	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:
; Line 109
	mov	ecx, DWORD PTR [eax-4]
; Line 120
	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:
; Line 127
	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:
; Line 131
	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:
; Line 134
	mov	ecx, DWORD PTR __Ptr$[esp-4]
$LN3@Deallocate:
; Line 138
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
; Line 139
	ret	0
??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ENDP ; std::_Deallocate<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 187
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Umove<char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1678
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	sub	esi, eax
	push	esi
	push	eax
	push	DWORD PTR __Ptr$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 1680
	ret	12					; 0000000cH
??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Umove<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 187
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1678
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	esi
	lea	esi, DWORD PTR [eax*4]
	push	esi
	push	ecx
	push	DWORD PTR __Ptr$[esp+8]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 1680
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<plain_particle> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 187
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@@std@@YAXPAVplain_particle@@0AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAVplain_particle@@@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEPAVplain_particle@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAVplain_particle@@@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEPAVplain_particle@@PAV2@00@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Umove<plain_particle *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1678
	push	DWORD PTR __Cat$1[esp-4]
	push	0
	push	ecx
	push	DWORD PTR __Ptr$[esp+8]
	push	DWORD PTR __Last$[esp+12]
	push	DWORD PTR __First$[esp+16]
	call	??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
	add	esp, 24					; 00000018H
; Line 1680
	ret	12					; 0000000cH
??$_Umove@PAVplain_particle@@@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEPAVplain_particle@@PAV2@00@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Umove<plain_particle *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?zero@?$duration_values@_J@chrono@std@@SA_JXZ
_TEXT	SEGMENT
?zero@?$duration_values@_J@chrono@std@@SA_JXZ PROC	; std::chrono::duration_values<__int64>::zero, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 35
	xor	eax, eax
	xor	edx, edx
; Line 36
	ret	0
?zero@?$duration_values@_J@chrono@std@@SA_JXZ ENDP	; std::chrono::duration_values<__int64>::zero
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 287
	mov	DWORD PTR [ecx], 0
; Line 289
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 287
	mov	DWORD PTR [ecx], 0
; Line 289
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	8
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0ABV?$allocator@Vplain_particle@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vplain_particle@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@Vplain_particle@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vplain_particle@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1><std::allocator<plain_particle> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 287
	mov	DWORD PTR [ecx], 0
; Line 289
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	8
??$?0ABV?$allocator@Vplain_particle@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vplain_particle@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1><std::allocator<plain_particle> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 142
	mov	al, BYTE PTR [ecx+4]
; Line 143
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 130
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; Line 132
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	test	al, al
	jne	SHORT $LN2@sentry
; Line 133
	mov	ecx, DWORD PTR [esi]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:
; Line 138
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+ecx+56]
	test	ecx, ecx
	je	SHORT $LN5@sentry
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN5@sentry:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	call	___std_terminate
	ret	0
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtpy
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 123
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
; Line 122
	mov	esi, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [edi], esi
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+esi+56]
	test	ecx, ecx
	je	SHORT $LN6@sentry
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
$LN6@sentry:
; Line 124
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+esi+12], 0
	jne	SHORT $LN2@sentry
	mov	ecx, DWORD PTR [eax+esi+60]
	test	ecx, ecx
	je	SHORT $LN2@sentry
	cmp	ecx, esi
	je	SHORT $LN2@sentry
; Line 125
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
$LN2@sentry:
; Line 126
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+esi+12], 0
	sete	al
	mov	BYTE PTR [edi+4], al
; Line 127
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 106
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 107
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+ecx+56]
	test	ecx, ecx
	je	SHORT $LN2@Sentry_bas
; Line 108
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN2@Sentry_bas:
; Line 109
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 99
	mov	edx, DWORD PTR __Ostr$[esp-4]
	push	esi
; Line 100
	mov	esi, ecx
	mov	DWORD PTR [esi], edx
; Line 101
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+edx+56]
	test	ecx, ecx
	je	SHORT $LN8@Sentry_bas
; Line 102
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
$LN8@Sentry_bas:
; Line 103
	mov	eax, esi
	pop	esi
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DABD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADABD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@DABD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADABD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char,char const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 919
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN13@construct:
; Line 921
	ret	8
??$construct@DABD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADABD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char,char const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@DAAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADAAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@DAAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADAAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char,char &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 919
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx], al
$LN13@construct:
; Line 921
	ret	8
??$construct@DAAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADAAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char,char &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@$$CBD@std@@YAPBDABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBD@std@@YAPBDABD@Z PROC			; std::addressof<char const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 700
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 701
	ret	0
??$addressof@$$CBD@std@@YAPBDABD@Z ENDP			; std::addressof<char const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 919
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:
; Line 921
	ret	8
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 919
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:
; Line 921
	ret	8
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 700
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 701
	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$construct@Vplain_particle@@V1@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Vplain_particle@@V1@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::construct<plain_particle,plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 919
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
$LN13@construct:
; Line 921
	ret	8
??$construct@Vplain_particle@@V1@@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@$$QAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::construct<plain_particle,plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$forward@Vplain_particle@@@std@@YA$$QAVplain_particle@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Vplain_particle@@@std@@YA$$QAVplain_particle@@AAV1@@Z PROC ; std::forward<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
; Line 1294
	mov	eax, DWORD PTR __Arg$[esp-4]
; Line 1295
	ret	0
??$forward@Vplain_particle@@@std@@YA$$QAVplain_particle@@AAV1@@Z ENDP ; std::forward<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@@Z PROC ; std::addressof<plain_particle>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; Line 700
	mov	eax, DWORD PTR __Val$[esp-4]
; Line 701
	ret	0
??$addressof@Vplain_particle@@@std@@YAPAVplain_particle@@AAV1@@Z ENDP ; std::addressof<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@I@Z
_TEXT	SEGMENT
tv81 = -8						; size = 8
_f$ = 8							; size = 16
_n$ = 24						; size = 4
??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@I@Z PROC ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
	mov	eax, DWORD PTR _n$[esp+20]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv81[esp+24], xmm0
	fdiv	QWORD PTR tv81[esp+24]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 24					; 00000018H
	ret	0
??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@I@Z ENDP ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@Z
_TEXT	SEGMENT
_tmp$1 = -12						; size = 12
_it$ = 8						; size = 12
_n$ = 20						; size = 4
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@Z PROC ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,unsigned int>, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 284
	sub	esp, 12					; 0000000cH
; Line 285
	xor	eax, eax
	mov	DWORD PTR ?render_output@@3HA, eax
	push	ebx
; Line 286
	mov	ebx, DWORD PTR _n$[esp+12]
	push	edi
	xor	edi, edi
	test	ebx, ebx
	je	SHORT $LN3@render
	movq	xmm0, QWORD PTR _it$[esp+16]
	push	ebp
	mov	ebp, DWORD PTR _it$[esp+28]
	push	esi
$LL4@render:
	lea	ecx, DWORD PTR [edi*4]
	movq	QWORD PTR _tmp$1[esp+28], xmm0
	mov	edx, DWORD PTR _tmp$1[esp+32]
	lea	esi, DWORD PTR [ecx+ebp]
	add	edx, ecx
	mov	ecx, DWORD PTR _it$[esp+24]
	movsx	ecx, BYTE PTR [ecx+edi]
	inc	edi
	add	ecx, DWORD PTR [esi]
	add	ecx, DWORD PTR [edx]
	add	eax, ecx
	cmp	edi, ebx
	jb	SHORT $LL4@render
	pop	esi
	mov	DWORD PTR ?render_output@@3HA, eax
	pop	ebp
$LN3@render:
	pop	edi
	pop	ebx
; Line 288
	add	esp, 12					; 0000000cH
	ret	0
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@Z ENDP ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABI@Z
_TEXT	SEGMENT
_<beg_rdod>$ = 8					; size = 4
_<n>$ = 12						; size = 4
??0<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABI@Z PROC ; <lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 344
	mov	eax, DWORD PTR _<beg_rdod>$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<n>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	8
??0<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABI@Z ENDP ; <lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QBEHXZ PROC ; <lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 344
	push	DWORD PTR [ecx+12]
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@I@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,unsigned int>
	add	esp, 16					; 00000010H
	ret	0
??R<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@QBEHXZ ENDP ; <lambda_4c02ba5ef62215ee51f4e58ccd3418c3>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@I@Z
_TEXT	SEGMENT
tv82 = -8						; size = 8
_f$ = 8							; size = 24
_n$ = 32						; size = 4
??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@I@Z PROC ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 24					; 00000018H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR _f$[esp+44]
	movq	QWORD PTR [eax+16], xmm0
	call	??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
	mov	eax, DWORD PTR _n$[esp+28]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv82[esp+32], xmm0
	fdiv	QWORD PTR tv82[esp+32]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 32					; 00000020H
	ret	0
??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@I@Z ENDP ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@Z
_TEXT	SEGMENT
_tmp$1 = -20						; size = 20
_it$ = 8						; size = 20
_n$ = 28						; size = 4
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@Z PROC ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,unsigned int>, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 284
	sub	esp, 20					; 00000014H
; Line 285
	xor	eax, eax
	mov	DWORD PTR ?render_output@@3HA, eax
	push	ebx
; Line 286
	mov	ebx, DWORD PTR _n$[esp+20]
	push	edi
	xor	edi, edi
	test	ebx, ebx
	je	SHORT $LN3@render
	movups	xmm0, XMMWORD PTR _it$[esp+24]
	push	ebp
	push	esi
	npad	3
$LL4@render:
	lea	edx, DWORD PTR [edi*4]
	movups	XMMWORD PTR _tmp$1[esp+36], xmm0
	mov	esi, DWORD PTR _tmp$1[esp+40]
	mov	ecx, DWORD PTR _tmp$1[esp+44]
	add	esi, edx
	add	ecx, edx
	mov	edx, DWORD PTR _it$[esp+32]
	movsx	edx, BYTE PTR [edx+edi]
	inc	edi
	add	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR [esi]
	add	eax, edx
	cmp	edi, ebx
	jb	SHORT $LL4@render
	pop	esi
	mov	DWORD PTR ?render_output@@3HA, eax
	pop	ebp
$LN3@render:
	pop	edi
	pop	ebx
; Line 288
	add	esp, 20					; 00000014H
	ret	0
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@Z ENDP ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_668201fb256ca3039b30842ebf04ef83>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABI@Z
_TEXT	SEGMENT
_<beg_dod>$ = 8						; size = 4
_<n>$ = 12						; size = 4
??0<lambda_668201fb256ca3039b30842ebf04ef83>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABI@Z PROC ; <lambda_668201fb256ca3039b30842ebf04ef83>::<lambda_668201fb256ca3039b30842ebf04ef83>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 343
	mov	eax, DWORD PTR _<beg_dod>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _<n>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	8
??0<lambda_668201fb256ca3039b30842ebf04ef83>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABI@Z ENDP ; <lambda_668201fb256ca3039b30842ebf04ef83>::<lambda_668201fb256ca3039b30842ebf04ef83>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_668201fb256ca3039b30842ebf04ef83>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_668201fb256ca3039b30842ebf04ef83>@@QBEHXZ PROC ; <lambda_668201fb256ca3039b30842ebf04ef83>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 343
	push	DWORD PTR [ecx+20]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+16]
	sub	esp, 20					; 00000014H
	mov	edx, esp
	movups	XMMWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+16], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@I@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,unsigned int>
	add	esp, 24					; 00000018H
	ret	0
??R<lambda_668201fb256ca3039b30842ebf04ef83>@@QBEHXZ ENDP ; <lambda_668201fb256ca3039b30842ebf04ef83>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@I@Z
_TEXT	SEGMENT
tv81 = -8						; size = 8
_f$ = 8							; size = 16
_n$ = 24						; size = 4
??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@I@Z PROC ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
	mov	eax, DWORD PTR _n$[esp+20]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv81[esp+24], xmm0
	fdiv	QWORD PTR tv81[esp+24]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 24					; 00000018H
	ret	0
??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@I@Z ENDP ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_a29049cf6153b725a6a331d7121b9876>@@QAE@ABQADABQAH1ABI@Z
_TEXT	SEGMENT
_<beg_color>$ = 8					; size = 4
_<beg_x>$ = 12						; size = 4
_<beg_y>$ = 16						; size = 4
_<n>$ = 20						; size = 4
??0<lambda_a29049cf6153b725a6a331d7121b9876>@@QAE@ABQADABQAH1ABI@Z PROC ; <lambda_a29049cf6153b725a6a331d7121b9876>::<lambda_a29049cf6153b725a6a331d7121b9876>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 342
	mov	eax, DWORD PTR _<beg_color>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _<beg_x>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<beg_y>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<n>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	16					; 00000010H
??0<lambda_a29049cf6153b725a6a331d7121b9876>@@QAE@ABQADABQAH1ABI@Z ENDP ; <lambda_a29049cf6153b725a6a331d7121b9876>::<lambda_a29049cf6153b725a6a331d7121b9876>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_a29049cf6153b725a6a331d7121b9876>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_a29049cf6153b725a6a331d7121b9876>@@QBEHXZ PROC ; <lambda_a29049cf6153b725a6a331d7121b9876>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 342
	push	DWORD PTR [ecx+12]
	push	DWORD PTR [ecx+8]
	push	DWORD PTR [ecx+4]
	push	DWORD PTR [ecx]
	call	?render@@YAHPADPAH1I@Z			; render
	add	esp, 16					; 00000010H
	ret	0
??R<lambda_a29049cf6153b725a6a331d7121b9876>@@QBEHXZ ENDP ; <lambda_a29049cf6153b725a6a331d7121b9876>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@I@Z
_TEXT	SEGMENT
tv79 = -8						; size = 8
_f$ = 8							; size = 8
_n$ = 16						; size = 4
??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@I@Z PROC ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	push	DWORD PTR _f$[esp+8]
	push	DWORD PTR _f$[esp+8]
	call	??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
	mov	eax, DWORD PTR _n$[esp+12]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv79[esp+16], xmm0
	fdiv	QWORD PTR tv79[esp+16]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 16					; 00000010H
	ret	0
??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@I@Z ENDP ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@Z
_TEXT	SEGMENT
_it$ = 8						; size = 4
_n$ = 12						; size = 4
??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@Z PROC ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >,unsigned int>, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 284
	push	esi
; Line 286
	mov	esi, DWORD PTR _n$[esp]
	xor	eax, eax
	mov	DWORD PTR ?render_output@@3HA, eax
	test	esi, esi
	je	SHORT $LN3@render
; Line 285
	mov	ecx, DWORD PTR _it$[esp]
	add	ecx, 4
	npad	9
$LL4@render:
; Line 286
	movsx	edx, BYTE PTR [ecx-4]
	lea	ecx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR [ecx-16]
	add	edx, DWORD PTR [ecx-20]
	add	eax, edx
	sub	esi, 1
	jne	SHORT $LL4@render
	mov	DWORD PTR ?render_output@@3HA, eax
$LN3@render:
	pop	esi
; Line 288
	ret	0
??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@Z ENDP ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@ABI@Z
_TEXT	SEGMENT
_<beg_oop>$ = 8						; size = 4
_<n>$ = 12						; size = 4
??0<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@ABI@Z PROC ; <lambda_ce14b79be95f650ececed4b3079e7cf8>::<lambda_ce14b79be95f650ececed4b3079e7cf8>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 341
	mov	eax, DWORD PTR _<beg_oop>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _<n>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??0<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@ABI@Z ENDP ; <lambda_ce14b79be95f650ececed4b3079e7cf8>::<lambda_ce14b79be95f650ececed4b3079e7cf8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QBEHXZ PROC ; <lambda_ce14b79be95f650ececed4b3079e7cf8>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 341
	push	DWORD PTR [ecx+4]
	push	DWORD PTR [ecx]
	call	??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@I@Z ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >,unsigned int>
	add	esp, 8
	ret	0
??R<lambda_ce14b79be95f650ececed4b3079e7cf8>@@QBEHXZ ENDP ; <lambda_ce14b79be95f650ececed4b3079e7cf8>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@I@Z
_TEXT	SEGMENT
tv82 = -8						; size = 8
_f$ = 8							; size = 24
_n$ = 32						; size = 4
??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@I@Z PROC ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 24					; 00000018H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR _f$[esp+44]
	movq	QWORD PTR [eax+16], xmm0
	call	??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
	mov	eax, DWORD PTR _n$[esp+28]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv82[esp+32], xmm0
	fdiv	QWORD PTR tv82[esp+32]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 32					; 00000020H
	ret	0
??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@I@Z ENDP ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_first$ = 8						; size = 12
_last$ = 20						; size = 12
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z PROC ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 276
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 278
	mov	ebx, DWORD PTR _first$[esp+12]
	push	edi
	xor	edi, edi
	mov	DWORD PTR ?render_output@@3HA, edi
	cmp	ebx, DWORD PTR _last$[esp+16]
	je	SHORT $LN79@render
	push	ebp
	mov	ebp, DWORD PTR _first$[esp+28]
	push	esi
	npad	3
$LL2@render:
	movq	xmm0, QWORD PTR _first$[esp+24]
	mov	esi, ebp
	add	DWORD PTR _first$[esp+28], 4
	inc	ebx
	movq	QWORD PTR $T1[esp+28], xmm0
	add	ebp, 4
	mov	eax, DWORD PTR $T1[esp+28]
	mov	ecx, DWORD PTR $T1[esp+32]
	mov	DWORD PTR _first$[esp+24], ebx
	mov	DWORD PTR _first$[esp+32], ebp
	movsx	edx, BYTE PTR [eax]
	add	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR [esi]
	add	edi, edx
	cmp	ebx, DWORD PTR _last$[esp+24]
	jne	SHORT $LL2@render
	pop	esi
	mov	DWORD PTR ?render_output@@3HA, edi
	pop	ebp
$LN79@render:
; Line 279
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 280
	add	esp, 12					; 0000000cH
	ret	0
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z ENDP ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z
_TEXT	SEGMENT
_<beg_rdod>$ = 8					; size = 4
_<end_rdod>$ = 12					; size = 4
??0<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z PROC ; <lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 340
	mov	eax, DWORD PTR _<beg_rdod>$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<end_rdod>$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, ecx
	ret	8
??0<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z ENDP ; <lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QBEHXZ PROC ; <lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 340
	push	esi
	mov	esi, ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	movq	xmm0, QWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+20]
	movq	QWORD PTR [edx], xmm0
	movq	xmm0, QWORD PTR [esi]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [esi+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > > >
	add	esp, 24					; 00000018H
	pop	esi
	ret	0
??R<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@QBEHXZ ENDP ; <lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@I@Z
_TEXT	SEGMENT
tv83 = -8						; size = 8
_f$ = 8							; size = 40
_n$ = 48						; size = 4
??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@I@Z PROC ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 40					; 00000028H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR _f$[esp+60]
	movups	XMMWORD PTR [eax+16], xmm0
	movq	xmm0, QWORD PTR _f$[esp+76]
	movq	QWORD PTR [eax+32], xmm0
	call	??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
	mov	eax, DWORD PTR _n$[esp+44]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv83[esp+48], xmm0
	fdiv	QWORD PTR tv83[esp+48]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 48					; 00000030H
	ret	0
??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@I@Z ENDP ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z
_TEXT	SEGMENT
_first$ = 8						; size = 20
_last$ = 28						; size = 20
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z PROC ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 276
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
; Line 278
	mov	edi, DWORD PTR _first$[esp+24]
	xor	esi, esi
	mov	DWORD PTR ?render_output@@3HA, esi
	cmp	edi, DWORD PTR _last$[esp+24]
	je	SHORT $LN87@render
	push	ebx
	mov	ebx, DWORD PTR _first$[esp+44]
	push	ebp
	mov	ebp, DWORD PTR _first$[esp+44]
$LL2@render:
	movups	xmm1, XMMWORD PTR _first$[esp+32]
	add	DWORD PTR _first$[esp+36], 4
	inc	edi
	add	DWORD PTR _first$[esp+40], 4
	add	ebp, 4
	movd	eax, xmm1
	add	ebx, 4
	movaps	xmm0, xmm1
	mov	DWORD PTR _first$[esp+32], edi
	mov	DWORD PTR _first$[esp+44], ebp
	mov	DWORD PTR _first$[esp+48], ebx
	psrldq	xmm0, 8
	psrldq	xmm1, 4
	movsx	edx, BYTE PTR [eax]
	movd	eax, xmm0
	movd	ecx, xmm1
	add	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	add	esi, edx
	cmp	edi, DWORD PTR _last$[esp+32]
	jne	SHORT $LL2@render
	pop	ebp
	mov	DWORD PTR ?render_output@@3HA, esi
	pop	ebx
$LN87@render:
; Line 279
	pop	edi
	mov	eax, esi
	pop	esi
; Line 280
	add	esp, 20					; 00000014H
	ret	0
??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z ENDP ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_4bb02fb8e2d5361150321278473362ff>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z
_TEXT	SEGMENT
_<beg_dod>$ = 8						; size = 4
_<end_dod>$ = 12					; size = 4
??0<lambda_4bb02fb8e2d5361150321278473362ff>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z PROC ; <lambda_4bb02fb8e2d5361150321278473362ff>::<lambda_4bb02fb8e2d5361150321278473362ff>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 339
	mov	eax, DWORD PTR _<beg_dod>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _<end_dod>$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+20], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+36], eax
	mov	eax, ecx
	ret	8
??0<lambda_4bb02fb8e2d5361150321278473362ff>@@QAE@ABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z ENDP ; <lambda_4bb02fb8e2d5361150321278473362ff>::<lambda_4bb02fb8e2d5361150321278473362ff>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_4bb02fb8e2d5361150321278473362ff>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_4bb02fb8e2d5361150321278473362ff>@@QBEHXZ PROC ; <lambda_4bb02fb8e2d5361150321278473362ff>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 339
	push	esi
	mov	esi, ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	movups	xmm0, XMMWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+36]
	movups	XMMWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+16], eax
	movups	xmm0, XMMWORD PTR [esi]
	mov	eax, DWORD PTR [esi+16]
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], eax
	call	??$render@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@@@YAHV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@0@Z ; render<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > > >
	add	esp, 40					; 00000028H
	pop	esi
	ret	0
??R<lambda_4bb02fb8e2d5361150321278473362ff>@@QBEHXZ ENDP ; <lambda_4bb02fb8e2d5361150321278473362ff>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@I@Z
_TEXT	SEGMENT
tv81 = -8						; size = 8
_f$ = 8							; size = 16
_n$ = 24						; size = 4
??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@I@Z PROC ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	movups	xmm0, XMMWORD PTR _f$[esp+4]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
	mov	eax, DWORD PTR _n$[esp+20]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv81[esp+24], xmm0
	fdiv	QWORD PTR tv81[esp+24]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 24					; 00000018H
	ret	0
??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@I@Z ENDP ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QAE@ABQAD0ABQAH1@Z
_TEXT	SEGMENT
_<beg_color>$ = 8					; size = 4
_<end_color>$ = 12					; size = 4
_<beg_x>$ = 16						; size = 4
_<beg_y>$ = 20						; size = 4
??0<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QAE@ABQAD0ABQAH1@Z PROC ; <lambda_0e8cd367240c9f8b6afbbc7d85139419>::<lambda_0e8cd367240c9f8b6afbbc7d85139419>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 338
	mov	eax, DWORD PTR _<beg_color>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _<end_color>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<beg_x>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<beg_y>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, ecx
	ret	16					; 00000010H
??0<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QAE@ABQAD0ABQAH1@Z ENDP ; <lambda_0e8cd367240c9f8b6afbbc7d85139419>::<lambda_0e8cd367240c9f8b6afbbc7d85139419>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QBEHXZ PROC ; <lambda_0e8cd367240c9f8b6afbbc7d85139419>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 338
	push	DWORD PTR [ecx+12]
	push	DWORD PTR [ecx+8]
	push	DWORD PTR [ecx+4]
	push	DWORD PTR [ecx]
	call	?render@@YAHPAD0PAH1@Z			; render
	add	esp, 16					; 00000010H
	ret	0
??R<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@QBEHXZ ENDP ; <lambda_0e8cd367240c9f8b6afbbc7d85139419>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@I@Z
_TEXT	SEGMENT
tv79 = -8						; size = 8
_f$ = 8							; size = 8
_n$ = 16						; size = 4
??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@I@Z PROC ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 291
	sub	esp, 8
	push	DWORD PTR _f$[esp+8]
	push	DWORD PTR _f$[esp+8]
	call	??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
	mov	eax, DWORD PTR _n$[esp+12]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv79[esp+16], xmm0
	fdiv	QWORD PTR tv79[esp+16]
	fmul	QWORD PTR __real@416312d000000000
	add	esp, 16					; 00000010H
	ret	0
??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@I@Z ENDP ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_last$ = 12						; size = 4
??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z PROC ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > > >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 278
	mov	ecx, DWORD PTR _first$[esp-4]
	mov	edx, DWORD PTR _last$[esp-4]
	push	esi
	xor	esi, esi
	mov	DWORD PTR ?render_output@@3HA, esi
	cmp	ecx, edx
	je	SHORT $LN44@render
	push	edi
$LL2@render:
	mov	eax, ecx
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _first$[esp+4], ecx
	mov	edi, DWORD PTR [eax+8]
	add	edi, DWORD PTR [eax+4]
	movsx	eax, BYTE PTR [eax]
	add	esi, eax
	add	esi, edi
	cmp	ecx, edx
	jne	SHORT $LL2@render
	mov	DWORD PTR ?render_output@@3HA, esi
	pop	edi
$LN44@render:
; Line 279
	mov	eax, esi
	pop	esi
; Line 280
	ret	0
??$render@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@@@YAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z ENDP ; render<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z
_TEXT	SEGMENT
_<beg_oop>$ = 8						; size = 4
_<end_oop>$ = 12					; size = 4
??0<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z PROC ; <lambda_3c38aff788b9781cf78ca5a917f16ae4>::<lambda_3c38aff788b9781cf78ca5a917f16ae4>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 337
	mov	eax, DWORD PTR _<beg_oop>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _<end_oop>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??0<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QAE@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@0@Z ENDP ; <lambda_3c38aff788b9781cf78ca5a917f16ae4>::<lambda_3c38aff788b9781cf78ca5a917f16ae4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??R<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QBEHXZ
_TEXT	SEGMENT
??R<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QBEHXZ PROC ; <lambda_3c38aff788b9781cf78ca5a917f16ae4>::operator(), COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 337
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	push	edi
	xor	edi, edi
	mov	DWORD PTR ?render_output@@3HA, edi
	cmp	ecx, edx
	je	SHORT $LN46@operator
	push	esi
$LL4@operator:
	mov	eax, ecx
	add	ecx, 20					; 00000014H
	mov	esi, DWORD PTR [eax+8]
	add	esi, DWORD PTR [eax+4]
	movsx	eax, BYTE PTR [eax]
	add	edi, eax
	add	edi, esi
	cmp	ecx, edx
	jne	SHORT $LL4@operator
	mov	DWORD PTR ?render_output@@3HA, edi
	pop	esi
$LN46@operator:
	mov	eax, edi
	pop	edi
	ret	0
??R<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@QBEHXZ ENDP ; <lambda_3c38aff788b9781cf78ca5a917f16ae4>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_n$ = 16						; size = 4
??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z PROC ; boost::iterators::operator+<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 948
	sub	esp, 12					; 0000000cH
; Line 945
	mov	eax, DWORD PTR _i$[esp+8]
	movq	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _n$[esp+8]
	movq	QWORD PTR _tmp$[esp+12], xmm0
	add	DWORD PTR _tmp$[esp+12], eax
	shl	eax, 2
	add	DWORD PTR _tmp$[esp+16], eax
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	movq	xmm0, QWORD PTR _tmp$[esp+12]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	add	esp, 12					; 0000000cH
	ret	0
??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z ENDP ; boost::iterators::operator+<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXI@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 136
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	ret	4
?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXI@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXXZ
_TEXT	SEGMENT
?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXXZ PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 134
	inc	DWORD PTR [ecx]
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	ret	0
?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@AAEXXZ ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE_NABV12@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE_NABV12@@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::equal, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 133
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
	ret	4
?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE_NABV12@@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::dereference, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 132
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	ret	4
?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::dereference
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@I@Z
_TEXT	SEGMENT
_tmp$1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_n$ = 12						; size = 4
??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@I@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::operator[], COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 127
	sub	esp, 12					; 0000000cH
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR _n$[esp+8]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR _tmp$1[esp+12], xmm0
	add	DWORD PTR _tmp$1[esp+12], eax
	shl	eax, 2
	add	DWORD PTR _tmp$1[esp+16], eax
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	movq	xmm0, QWORD PTR _tmp$1[esp+12]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
	add	esp, 12					; 0000000cH
	ret	8
??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@I@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@1@@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 125
	mov	eax, DWORD PTR _a$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	4
??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@1@@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,1,1>::operator+=, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 733
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
; Line 734
	mov	eax, ecx
; Line 735
	ret	4
??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@H@Z ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,1,1>::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::derived, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 671
	mov	eax, ecx
; Line 672
	ret	0
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::derived, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 666
	mov	eax, ecx
; Line 667
	ret	0
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator++, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 656
	inc	DWORD PTR [ecx]
; Line 657
	mov	eax, ecx
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
; Line 658
	ret	0
??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@123@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@123@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator->, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 651
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 652
	ret	4
??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@123@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator*, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 646
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 647
	ret	4
??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,int,0,0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::apply, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 326
	mov	ecx, DWORD PTR _x$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 327
	ret	0
?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@Z ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > > *>::apply
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QBEXXZ
_TEXT	SEGMENT
?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QBEXXZ PROC ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >::render, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 227
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx]
	movsx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR ?render_output@@3HA
	add	eax, esi
	mov	DWORD PTR ?render_output@@3HA, eax
	pop	esi
; Line 228
	ret	0
?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QBEXXZ ENDP ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >::render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@Z PROC ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >::particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 223
	mov	eax, DWORD PTR _a$[esp-4]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	4
??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@Z ENDP ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >::particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@0@@Z PROC ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 145
	mov	ecx, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movq	xmm0, QWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], ecx
; Line 146
	ret	0
??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@0@@Z ENDP ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PADPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAE@$$QAPAD$$QAPAH1@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
??$?0PADPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAE@$$QAPAD$$QAPAH1@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> ><char *,int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<args_1>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
; Line 101
	mov	eax, ecx
	ret	12					; 0000000cH
??$?0PADPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAE@$$QAPAD$$QAPAH1@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> ><char *,int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	ret	4
?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	inc	DWORD PTR [ecx]
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	ret	0
?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QBE_NABV12@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QBE_NABV12@@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::equal, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 106
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
	ret	4
?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@@dod@@QBE_NABV12@@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1> >::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,0>,dod::member<int,1> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	add	DWORD PTR [ecx+4], eax
	ret	4
?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,0>,dod::member<int,1> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,0>,dod::member<int,1> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	add	DWORD PTR [ecx], 4
	add	DWORD PTR [ecx+4], 4
	ret	0
?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,0>,dod::member<int,1> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z
_TEXT	SEGMENT
_tmp$ = -20						; size = 20
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_n$ = 16						; size = 4
??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z PROC ; boost::iterators::operator+<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 948
	sub	esp, 20					; 00000014H
; Line 945
	mov	eax, DWORD PTR _i$[esp+16]
	mov	ecx, DWORD PTR _n$[esp+16]
	movups	xmm0, XMMWORD PTR [eax]
	mov	edx, DWORD PTR [eax+16]
	movd	eax, xmm0
	movups	XMMWORD PTR _tmp$[esp+20], xmm0
	add	eax, ecx
	shl	ecx, 2
	add	DWORD PTR _tmp$[esp+24], ecx
	add	DWORD PTR _tmp$[esp+28], ecx
	add	DWORD PTR _tmp$[esp+32], ecx
	add	edx, ecx
	mov	DWORD PTR _tmp$[esp+20], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	movups	xmm0, XMMWORD PTR _tmp$[esp+20]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], edx
	add	esp, 20					; 00000014H
	ret	0
??$?HV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V2@H@iterators@boost@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABV?$iterator_facade@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H@01@H@Z ENDP ; boost::iterators::operator+<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXI@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 136
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	add	DWORD PTR [ecx+12], eax
	add	DWORD PTR [ecx+16], eax
	ret	4
?advance@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXI@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXXZ
_TEXT	SEGMENT
?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXXZ PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 134
	inc	DWORD PTR [ecx]
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	add	DWORD PTR [ecx+12], 4
	add	DWORD PTR [ecx+16], 4
	ret	0
?increment@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@AAEXXZ ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE_NABV12@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE_NABV12@@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::equal, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 133
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
	ret	4
?equal@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE_NABV12@@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::dereference, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 132
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
	ret	4
?dereference@?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@ABE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::dereference
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@I@Z
_TEXT	SEGMENT
_tmp$1 = -20						; size = 20
___$ReturnUdt$ = 8					; size = 4
_n$ = 12						; size = 4
??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@I@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::operator[], COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 127
	sub	esp, 20					; 00000014H
	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _n$[esp+16]
	movd	eax, xmm0
	movups	XMMWORD PTR _tmp$1[esp+20], xmm0
	add	eax, ecx
	shl	ecx, 2
	add	DWORD PTR _tmp$1[esp+24], ecx
	add	DWORD PTR _tmp$1[esp+28], ecx
	add	DWORD PTR _tmp$1[esp+32], ecx
	add	edx, ecx
	mov	DWORD PTR _tmp$1[esp+20], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	movups	xmm0, XMMWORD PTR _tmp$1[esp+20]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], edx
	add	esp, 20					; 00000014H
	ret	8
??A?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@I@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@1@@Z PROC ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 125
	mov	eax, DWORD PTR _a$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, ecx
	ret	4
??0?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@1@@Z ENDP ; dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,1,1>::operator+=, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 733
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	add	DWORD PTR [ecx+12], eax
	add	DWORD PTR [ecx+16], eax
; Line 734
	mov	eax, ecx
; Line 735
	ret	4
??Y?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$00$00@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@H@Z ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,1,1>::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::derived, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 671
	mov	eax, ecx
; Line 672
	ret	0
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IBEABV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::derived, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 666
	mov	eax, ecx
; Line 667
	ret	0
?derived@?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@IAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::derived
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ
_TEXT	SEGMENT
??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator++, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 656
	inc	DWORD PTR [ecx]
; Line 657
	mov	eax, ecx
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	add	DWORD PTR [ecx+12], 4
	add	DWORD PTR [ecx+16], 4
; Line 658
	ret	0
??E?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QAEAAV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@123@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@123@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator->, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 651
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
; Line 652
	ret	4
??C?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AUproxy@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@123@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ PROC ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator*, COMDAT
; _this$ = ecx
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 646
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
; Line 647
	ret	4
??D?$iterator_facade_base@V?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@dod@@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@Urandom_access_traversal_tag@iterators@boost@@V3@H$0A@$0A@@detail@iterators@boost@@QBE?AV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@XZ ENDP ; boost::iterators::detail::iterator_facade_base<dod::pointer<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,boost::iterators::random_access_traversal_tag,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,int,0,0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z PROC ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::apply, COMDAT
; File c:\mingw\include\boost\iterator\iterator_facade.hpp
; Line 326
	mov	ecx, DWORD PTR _x$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
; Line 327
	ret	0
?apply@?$operator_arrow_dispatch@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@PAV1@@detail@iterators@boost@@SA?AUproxy@1234@ABV?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@Z ENDP ; boost::iterators::detail::operator_arrow_dispatch<particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >,particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > > *>::apply
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QBEXXZ
_TEXT	SEGMENT
?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QBEXXZ PROC ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >::render, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 227
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx]
	movsx	eax, BYTE PTR [eax]
	add	eax, DWORD PTR ?render_output@@3HA
	add	eax, esi
	mov	DWORD PTR ?render_output@@3HA, eax
	pop	esi
; Line 228
	ret	0
?render@?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QBEXXZ ENDP ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >::render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@Z PROC ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >::particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 223
	mov	eax, DWORD PTR _a$[esp-4]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, ecx
	ret	4
??0?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@QAE@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@Z ENDP ; particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >::particle<dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@0@@Z PROC ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 145
	mov	ecx, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	movups	xmm0, XMMWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+16], ecx
; Line 146
	ret	0
??$make_pointer@Vparticle@@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@dod@@YA?AV?$pointer@V?$particle@V?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@@@@0@ABV?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@0@@Z ENDP ; dod::make_pointer<particle,dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PADPAHPAHPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAD$$QAPAH111@Z
_TEXT	SEGMENT
_arg0$ = 8						; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
??$?0PADPAHPAHPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAD$$QAPAH111@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><char *,int *,int *,int *,int *>, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 99
	mov	eax, DWORD PTR _arg0$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 100
	mov	eax, DWORD PTR _<args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _<args_1>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _<args_2>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _<args_3>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], eax
; Line 101
	mov	eax, ecx
	ret	20					; 00000014H
??$?0PADPAHPAHPAHPAH@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAE@$$QAPAD$$QAPAH111@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> ><char *,int *,int *,int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	shl	eax, 2
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	add	DWORD PTR [ecx+12], eax
	add	DWORD PTR [ecx+16], eax
	ret	4
?advance@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	inc	DWORD PTR [ecx]
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	add	DWORD PTR [ecx+12], 4
	add	DWORD PTR [ecx+16], 4
	ret	0
?increment@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QBE_NABV12@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QBE_NABV12@@Z PROC ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::equal, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 106
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
	ret	4
?equal@?$access@U?$member@D$0A@@dod@@U?$member@H$0A@@2@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QBE_NABV12@@Z ENDP ; dod::access<dod::member<char,0>,dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	add	DWORD PTR [ecx+12], eax
	ret	4
?advance@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	add	DWORD PTR [ecx], 4
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	add	DWORD PTR [ecx+12], 4
	ret	0
?increment@?$access@U?$member@H$0A@@dod@@U?$member@H$00@2@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,0>,dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	add	DWORD PTR [ecx+4], eax
	add	DWORD PTR [ecx+8], eax
	ret	4
?advance@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	add	DWORD PTR [ecx], 4
	add	DWORD PTR [ecx+4], 4
	add	DWORD PTR [ecx+8], 4
	ret	0
?increment@?$access@U?$member@H$00@dod@@U?$member@H$01@2@U?$member@H$02@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,1>,dod::member<int,2>,dod::member<int,3> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,2>,dod::member<int,3> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 109
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	add	DWORD PTR [ecx+4], eax
	ret	4
?advance@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,2>,dod::member<int,3> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,2>,dod::member<int,3> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 107
	add	DWORD PTR [ecx], 4
	add	DWORD PTR [ecx+4], 4
	ret	0
?increment@?$access@U?$member@H$01@dod@@U?$member@H$02@2@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,2>,dod::member<int,3> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$02@dod@@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$02@dod@@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,3> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 86
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	ret	4
?advance@?$access@U?$member@H$02@dod@@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,3> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$02@dod@@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$02@dod@@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,3> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 84
	add	DWORD PTR [ecx], 4
	ret	0
?increment@?$access@U?$member@H$02@dod@@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,3> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$access@U?$member@H$02@dod@@@dod@@QAE@PAH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$access@U?$member@H$02@dod@@@dod@@QAE@PAH@Z PROC	; dod::access<dod::member<int,3> >::access<dod::member<int,3> >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 78
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$access@U?$member@H$02@dod@@@dod@@QAE@PAH@Z ENDP	; dod::access<dod::member<int,3> >::access<dod::member<int,3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$01@dod@@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$01@dod@@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,2> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 86
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	ret	4
?advance@?$access@U?$member@H$01@dod@@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,2> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$01@dod@@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$01@dod@@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,2> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 84
	add	DWORD PTR [ecx], 4
	ret	0
?increment@?$access@U?$member@H$01@dod@@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,2> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$access@U?$member@H$01@dod@@@dod@@QAE@PAH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$access@U?$member@H$01@dod@@@dod@@QAE@PAH@Z PROC	; dod::access<dod::member<int,2> >::access<dod::member<int,2> >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 78
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$access@U?$member@H$01@dod@@@dod@@QAE@PAH@Z ENDP	; dod::access<dod::member<int,2> >::access<dod::member<int,2> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$00@dod@@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$00@dod@@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,1> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 86
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	ret	4
?advance@?$access@U?$member@H$00@dod@@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,1> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$00@dod@@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$00@dod@@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,1> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 84
	add	DWORD PTR [ecx], 4
	ret	0
?increment@?$access@U?$member@H$00@dod@@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,1> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$access@U?$member@H$00@dod@@@dod@@QBEABHU?$member@H$00@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?get@?$access@U?$member@H$00@dod@@@dod@@QBEABHU?$member@H$00@2@@Z PROC ; dod::access<dod::member<int,1> >::get, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 81
	mov	eax, DWORD PTR [ecx]
	ret	4
?get@?$access@U?$member@H$00@dod@@@dod@@QBEABHU?$member@H$00@2@@Z ENDP ; dod::access<dod::member<int,1> >::get
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$access@U?$member@H$00@dod@@@dod@@QAE@PAH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$access@U?$member@H$00@dod@@@dod@@QAE@PAH@Z PROC	; dod::access<dod::member<int,1> >::access<dod::member<int,1> >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 78
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$access@U?$member@H$00@dod@@@dod@@QAE@PAH@Z ENDP	; dod::access<dod::member<int,1> >::access<dod::member<int,1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@H$0A@@dod@@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@H$0A@@dod@@@dod@@QAEXI@Z PROC ; dod::access<dod::member<int,0> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 86
	mov	eax, DWORD PTR _n$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
	ret	4
?advance@?$access@U?$member@H$0A@@dod@@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<int,0> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@H$0A@@dod@@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@H$0A@@dod@@@dod@@QAEXXZ PROC ; dod::access<dod::member<int,0> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 84
	add	DWORD PTR [ecx], 4
	ret	0
?increment@?$access@U?$member@H$0A@@dod@@@dod@@QAEXXZ ENDP ; dod::access<dod::member<int,0> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$access@U?$member@H$0A@@dod@@@dod@@QBEABHU?$member@H$0A@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?get@?$access@U?$member@H$0A@@dod@@@dod@@QBEABHU?$member@H$0A@@2@@Z PROC ; dod::access<dod::member<int,0> >::get, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 81
	mov	eax, DWORD PTR [ecx]
	ret	4
?get@?$access@U?$member@H$0A@@dod@@@dod@@QBEABHU?$member@H$0A@@2@@Z ENDP ; dod::access<dod::member<int,0> >::get
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$access@U?$member@H$0A@@dod@@@dod@@QAE@PAH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$access@U?$member@H$0A@@dod@@@dod@@QAE@PAH@Z PROC	; dod::access<dod::member<int,0> >::access<dod::member<int,0> >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 78
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$access@U?$member@H$0A@@dod@@@dod@@QAE@PAH@Z ENDP	; dod::access<dod::member<int,0> >::access<dod::member<int,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?advance@?$access@U?$member@D$0A@@dod@@@dod@@QAEXI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?advance@?$access@U?$member@D$0A@@dod@@@dod@@QAEXI@Z PROC ; dod::access<dod::member<char,0> >::advance, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 86
	mov	eax, DWORD PTR _n$[esp-4]
	add	DWORD PTR [ecx], eax
	ret	4
?advance@?$access@U?$member@D$0A@@dod@@@dod@@QAEXI@Z ENDP ; dod::access<dod::member<char,0> >::advance
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?increment@?$access@U?$member@D$0A@@dod@@@dod@@QAEXXZ
_TEXT	SEGMENT
?increment@?$access@U?$member@D$0A@@dod@@@dod@@QAEXXZ PROC ; dod::access<dod::member<char,0> >::increment, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 84
	inc	DWORD PTR [ecx]
	ret	0
?increment@?$access@U?$member@D$0A@@dod@@@dod@@QAEXXZ ENDP ; dod::access<dod::member<char,0> >::increment
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?equal@?$access@U?$member@D$0A@@dod@@@dod@@QBE_NABV12@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?equal@?$access@U?$member@D$0A@@dod@@@dod@@QBE_NABV12@@Z PROC ; dod::access<dod::member<char,0> >::equal, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 83
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _x$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
	ret	4
?equal@?$access@U?$member@D$0A@@dod@@@dod@@QBE_NABV12@@Z ENDP ; dod::access<dod::member<char,0> >::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$access@U?$member@D$0A@@dod@@@dod@@QBEABDU?$member@D$0A@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?get@?$access@U?$member@D$0A@@dod@@@dod@@QBEABDU?$member@D$0A@@2@@Z PROC ; dod::access<dod::member<char,0> >::get, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 81
	mov	eax, DWORD PTR [ecx]
	ret	4
?get@?$access@U?$member@D$0A@@dod@@@dod@@QBEABDU?$member@D$0A@@2@@Z ENDP ; dod::access<dod::member<char,0> >::get
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$access@U?$member@D$0A@@dod@@@dod@@QAE@PAD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$access@U?$member@D$0A@@dod@@@dod@@QAE@PAD@Z PROC	; dod::access<dod::member<char,0> >::access<dod::member<char,0> >, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 78
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??0?$access@U?$member@D$0A@@dod@@@dod@@QAE@PAD@Z ENDP	; dod::access<dod::member<char,0> >::access<dod::member<char,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 389
	mov	eax, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
; Line 390
	ret	4
??A?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 368
	mov	eax, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx
; Line 369
	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 361
	mov	eax, DWORD PTR __Off$[esp-4]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
; Line 362
	mov	eax, ecx
; Line 363
	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 341
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 342
	add	edx, 20					; 00000014H
	mov	DWORD PTR [ecx], edx
; Line 344
	ret	8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 335
	add	DWORD PTR [ecx], 20			; 00000014H
; Line 336
	mov	eax, ecx
; Line 337
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEPAVplain_particle@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEPAVplain_particle@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator->, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 330
	mov	eax, DWORD PTR [ecx]
; Line 331
	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEPAVplain_particle@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 325
	mov	eax, DWORD PTR [ecx]
; Line 326
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEAAVplain_particle@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 306
	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax
; Line 308
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 256
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator!=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 211
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	setne	al
; Line 212
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator==, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 206
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 207
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 170
	mov	eax, DWORD PTR __Off$[esp-4]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax
; Line 171
	mov	eax, ecx
; Line 172
	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 112
	add	DWORD PTR [ecx], 20			; 00000014H
; Line 113
	mov	eax, ecx
; Line 114
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEABVplain_particle@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEABVplain_particle@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 86
	mov	eax, DWORD PTR [ecx]
; Line 87
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QBEABVplain_particle@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 46
	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax
; Line 49
	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@std@@QAE@PAVplain_particle@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_range@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXPAVplain_particle@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXPAVplain_particle@@0@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1813
	ret	8
?_Orphan_range@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXPAVplain_particle@@0@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Xlen@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1784
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEXXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1655
	push	esi
	mov	esi, ecx
; Line 1656
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy
; Line 1660
	mov	edx, DWORD PTR [esi+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, ecx
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	push	eax
	push	ecx
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
; Line 1662
	mov	DWORD PTR [esi], 0
	add	esp, 8
; Line 1663
	mov	DWORD PTR [esi+4], 0
; Line 1664
	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi
; Line 1666
	ret	0
?_Tidy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1645
	push	ebx
	mov	ebx, ecx
; Line 1646
	mov	eax, 1717986919				; 66666667H
	push	ebp
	push	esi
	push	edi
	mov	ebp, DWORD PTR [ebx+8]
	mov	edx, ebp
	mov	esi, DWORD PTR [ebx+4]
	sub	edx, esi
	mov	edi, DWORD PTR __Count$[esp+12]
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi
	jae	SHORT $LN2@Reserve
; Line 1648
	sub	esi, DWORD PTR [ebx]
	mov	eax, 1717986919				; 66666667H
	imul	esi
	mov	eax, 214748364				; 0cccccccH
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	sub	eax, ecx
	cmp	eax, edi
	jae	SHORT $LN3@Reserve
; Line 1649
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:
; Line 1650
	sub	ebp, DWORD PTR [ebx]
	mov	eax, 1717986919				; 66666667H
	imul	ebp
	add	edi, ecx
	xor	ebp, ebp
	sar	edx, 3
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	edx, 214748364				; 0cccccccH
	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	cmp	edx, esi
	lea	ecx, DWORD PTR [eax+esi]
	cmovb	ecx, ebp
	cmp	ecx, edi
	cmovb	ecx, edi
	push	ecx
	mov	ecx, ebx
	call	?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reallocate
$LN2@Reserve:
; Line 1652
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Size$1$ = 8						; size = 4
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1620
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; Line 1621
	mov	ebx, DWORD PTR __Count$[ebp]
	push	ebx
	call	?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z ; std::allocator<plain_particle>::allocate
; Line 1624
	push	DWORD PTR __Cat$2[ebp]
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	0
	push	esi
	push	edi
	push	DWORD PTR [esi+4]
	mov	DWORD PTR __Ptr$[ebp], edi
	push	DWORD PTR [esi]
	call	??$_Uninit_move@PAVplain_particle@@PAV1@V?$allocator@Vplain_particle@@@std@@V1@@std@@YAPAVplain_particle@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<plain_particle *,plain_particle *,std::allocator<plain_particle>,plain_particle>
; Line 1630
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, DWORD PTR [esi]
	add	esp, 24					; 00000018H
	imul	ecx
; Line 1631
	mov	eax, DWORD PTR [esi]
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	mov	DWORD PTR __Size$1$[ebp], ecx
	test	eax, eax
	je	SHORT $LN3@Reallocate
; Line 1634
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	push	eax
	push	DWORD PTR [esi]
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	mov	ecx, DWORD PTR __Size$1$[ebp]
	add	esp, 8
$LN3@Reallocate:
; Line 1639
	lea	eax, DWORD PTR [ebx+ebx*4]
	lea	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+8], eax
; Line 1640
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+4], eax
; Line 1641
	mov	DWORD PTR [esi], edi
; Line 1642
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z$0:
; Line 1626
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	add	esp, 8
; Line 1627
	push	0
	push	0
	call	__CxxThrowException@8
$LN183@Reallocate:
$LN182@Reallocate:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reallocate
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBE_NPBVplain_particle@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBE_NPBVplain_particle@@@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1616
	mov	eax, DWORD PTR __Ptr$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1
; Line 1617
	ret	4
$LN3@Inside:
; Line 1616
	xor	al, al
; Line 1617
	ret	4
?_Inside@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBE_NPBVplain_particle@@@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow_to@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEII@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1605
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
; Line 1607
	mov	ecx, 214748364				; 0cccccccH
	imul	edx
	push	esi
	sar	edx, 3
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	eax, esi
	shr	eax, 1
	push	edi
	sub	ecx, eax
	xor	edi, edi
	cmp	ecx, esi
	lea	edx, DWORD PTR [eax+esi]
	cmovb	edx, edi
; Line 1609
	cmp	edx, DWORD PTR __Count$[esp+4]
	pop	edi
	cmovb	edx, DWORD PTR __Count$[esp]
; Line 1611
	mov	eax, edx
	pop	esi
; Line 1612
	ret	4
?_Grow_to@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IBEII@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXPAVplain_particle@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXPAVplain_particle@@0@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1601
	ret	8
?_Destroy@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXPAVplain_particle@@0@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1184
	mov	eax, 214748364				; 0cccccccH
; Line 1185
	ret	0
?max_size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1179
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 1180
	ret	0
?size@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::end, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1067
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx
; Line 1068
	ret	4
?end@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1057
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx
; Line 1058
	ret	4
?begin@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@@2@XZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unused_capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1047
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx+4]
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 1048
	ret	0
?_Unused_capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1042
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 1043
	ret	0
?capacity@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QBEIXZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::~vector<plain_particle,std::allocator<plain_particle> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 974
	push	esi
	mov	esi, ecx
; Line 975
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@vector
	mov	edx, DWORD PTR [esi+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, ecx
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	push	eax
	push	ecx
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	mov	DWORD PTR [esi], 0
	add	esp, 8
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi
; Line 976
	ret	0
??1?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::~vector<plain_particle,std::allocator<plain_particle> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAEX$$QAVplain_particle@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAEX$$QAVplain_particle@@@Z PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 895
	push	esi
	mov	esi, ecx
	push	edi
; Line 896
	mov	edi, DWORD PTR __Val$[esp+4]
	mov	ecx, DWORD PTR [esi+4]
	cmp	edi, ecx
	jae	SHORT $LN2@push_back
	mov	eax, DWORD PTR [esi]
	cmp	eax, edi
	ja	SHORT $LN2@push_back
; Line 898
	sub	edi, eax
	mov	eax, 1717986919				; 66666667H
	imul	edi
	sar	edx, 3
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
; Line 899
	cmp	ecx, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back
; Line 900
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
$LN4@push_back:
; Line 902
	mov	edx, DWORD PTR [esi+4]
	test	edx, edx
	je	SHORT $LN211@push_back
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [edi+edi*4]
	pop	edi
	movups	xmm0, XMMWORD PTR [eax+ecx*4]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [eax+ecx*4+16]
	mov	DWORD PTR [edx+16], eax
; Line 913
	add	DWORD PTR [esi+4], 20			; 00000014H
	pop	esi
; Line 915
	ret	4
$LN2@push_back:
; Line 908
	cmp	ecx, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back
; Line 909
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
$LN5@push_back:
; Line 911
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN211@push_back
	movups	xmm0, XMMWORD PTR [edi]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [ecx+16], eax
$LN211@push_back:
; Line 913
	add	DWORD PTR [esi+4], 20			; 00000014H
	pop	edi
	pop	esi
; Line 915
	ret	4
?push_back@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAEX$$QAVplain_particle@@@Z ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ PROC ; std::vector<plain_particle,std::allocator<plain_particle> >::vector<plain_particle,std::allocator<plain_particle> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 705
	mov	DWORD PTR [ecx], 0
; Line 707
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ ENDP ; std::vector<plain_particle,std::allocator<plain_particle> >::vector<plain_particle,std::allocator<plain_particle> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 319
	mov	eax, ecx
; Line 320
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 314
	mov	eax, ecx
; Line 315
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 299
	mov	eax, ecx
; Line 300
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 294
	mov	eax, ecx
; Line 295
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<plain_particle> >,std::_Vector_val<std::_Simple_types<plain_particle> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<plain_particle> >::_Vector_val<std::_Simple_types<plain_particle> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 480
	mov	DWORD PTR [ecx], 0
; Line 483
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<plain_particle> >::_Vector_val<std::_Simple_types<plain_particle> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 667
	lea	eax, DWORD PTR [ecx+8]
; Line 668
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 662
	lea	eax, DWORD PTR [ecx+8]
; Line 663
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 657
	lea	eax, DWORD PTR [ecx+4]
; Line 658
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 652
	lea	eax, DWORD PTR [ecx+4]
; Line 653
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 647
	mov	eax, ecx
; Line 648
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABQAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 642
	mov	eax, ecx
; Line 643
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAPAVplain_particle@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 637
	mov	eax, ecx
; Line 638
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 632
	mov	eax, ecx
; Line 633
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 627
	mov	eax, ecx
; Line 628
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 622
	mov	eax, ecx
; Line 623
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 613
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 513
	mov	DWORD PTR [ecx], 0
; Line 515
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	4
??0?$_Vector_alloc@U?$_Vec_base_types@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >::_Vector_alloc<std::_Vec_base_types<plain_particle,std::allocator<plain_particle> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 932
	mov	eax, 214748364				; 0cccccccH
; Line 933
	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 911
	push	DWORD PTR __Count$[esp-4]
	push	DWORD PTR __Ptr$[esp]
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	add	esp, 8
; Line 912
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEXPAVplain_particle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEPAVplain_particle@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEPAVplain_particle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 900
	jmp	?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z ; std::allocator<plain_particle>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAEPAVplain_particle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<plain_particle> >::_Wrap_alloc<std::allocator<plain_particle> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 860
	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@Vplain_particle@@@std@@@std@@QAE@ABV?$allocator@Vplain_particle@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<plain_particle> >::_Wrap_alloc<std::allocator<plain_particle> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAIABV?$allocator@Vplain_particle@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAIABV?$allocator@Vplain_particle@@@2@@Z PROC ; std::allocator_traits<std::allocator<plain_particle> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 787
	mov	eax, 214748364				; 0cccccccH
; Line 788
	ret	0
?max_size@?$allocator_traits@V?$allocator@Vplain_particle@@@std@@@std@@SAIABV?$allocator@Vplain_particle@@@2@@Z ENDP ; std::allocator_traits<std::allocator<plain_particle> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@Vplain_particle@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@Vplain_particle@@@std@@QBEIXZ PROC ; std::allocator<plain_particle>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 669
	mov	eax, 214748364				; 0cccccccH
; Line 670
	ret	0
?max_size@?$allocator@Vplain_particle@@@std@@QBEIXZ ENDP ; std::allocator<plain_particle>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z PROC ; std::allocator<plain_particle>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 645
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:
; Line 646
	ret	4
; Line 645
$LN4@allocate:
	cmp	eax, 214748364				; 0cccccccH
	jbe	SHORT $LN5@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate
	lea	ecx, DWORD PTR [eax+35]
	cmp	ecx, eax
	ja	SHORT $LN8@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR [eax-4], ecx
; Line 646
	ret	4
$LN6@allocate:
; Line 645
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@Vplain_particle@@@std@@QAEPAVplain_particle@@I@Z ENDP ; std::allocator<plain_particle>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@I@Z PROC ; std::allocator<plain_particle>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 640
	push	DWORD PTR __Count$[esp-4]
	push	DWORD PTR __Ptr$[esp]
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	add	esp, 8
; Line 641
	ret	8
?deallocate@?$allocator@Vplain_particle@@@std@@QAEXPAVplain_particle@@I@Z ENDP ; std::allocator<plain_particle>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@Vplain_particle@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@Vplain_particle@@@std@@QAE@ABV01@@Z PROC	; std::allocator<plain_particle>::allocator<plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 625
	mov	eax, ecx
	ret	4
??0?$allocator@Vplain_particle@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<plain_particle>::allocator<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@Vplain_particle@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@Vplain_particle@@@std@@QAE@XZ PROC	; std::allocator<plain_particle>::allocator<plain_particle>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 621
	mov	eax, ecx
	ret	0
??0?$allocator@Vplain_particle@@@std@@QAE@XZ ENDP	; std::allocator<plain_particle>::allocator<plain_particle>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1813
	ret	8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1784
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1655
	push	esi
	mov	esi, ecx
; Line 1656
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy
; Line 1660
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
; Line 1662
	mov	DWORD PTR [esi], 0
	add	esp, 8
; Line 1663
	mov	DWORD PTR [esi+4], 0
; Line 1664
	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi
; Line 1666
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1645
	push	esi
	mov	esi, ecx
; Line 1646
	mov	ecx, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	mov	edx, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, ecx
	jae	SHORT $LN2@Reserve
; Line 1648
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [esi]
	mov	ebx, 1073741823				; 3fffffffH
	sub	edx, ebp
	mov	eax, ebx
	sar	edx, 2
	sub	eax, edx
	cmp	eax, ecx
	jae	SHORT $LN3@Reserve
; Line 1649
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN137@Reserve:
$LN3@Reserve:
; Line 1650
	sub	edi, ebp
	add	edx, ecx
	sar	edi, 2
	xor	ebp, ebp
	mov	eax, edi
	shr	eax, 1
	sub	ebx, eax
	cmp	ebx, edi
	lea	ecx, DWORD PTR [eax+edi]
	cmovb	ecx, ebp
	cmp	ecx, edx
	cmovb	ecx, edx
	push	ecx
	mov	ecx, esi
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
	pop	ebp
	pop	ebx
$LN2@Reserve:
; Line 1652
	pop	edi
	pop	esi
	ret	4
$LN136@Reserve:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1620
	push	ebx
	push	ebp
; Line 1621
	mov	ebp, DWORD PTR __Count$[esp+4]
	push	esi
	push	edi
	push	ebp
	mov	edi, ecx
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
; Line 1624
	mov	esi, DWORD PTR [edi]
	mov	ebx, eax
	mov	edx, DWORD PTR [edi+4]
	sub	edx, esi
	and	edx, -4					; fffffffcH
	push	edx
	push	esi
	push	ebx
	call	DWORD PTR __imp__memmove
; Line 1630
	mov	ecx, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	mov	esi, DWORD PTR [edi+4]
	sub	esi, ecx
	sar	esi, 2
; Line 1631
	test	ecx, ecx
	je	SHORT $LN3@Reallocate
; Line 1634
	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
$LN3@Reallocate:
; Line 1639
	lea	eax, DWORD PTR [ebx+ebp*4]
	mov	DWORD PTR [edi+8], eax
; Line 1640
	lea	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [edi+4], eax
; Line 1641
	mov	DWORD PTR [edi], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1642
	ret	4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1616
	mov	eax, DWORD PTR __Ptr$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1
; Line 1617
	ret	4
$LN3@Inside:
; Line 1616
	xor	al, al
; Line 1617
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1604
	push	esi
; Line 1605
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, DWORD PTR [ecx]
; Line 1607
	mov	ecx, 1073741823				; 3fffffffH
	sar	esi, 2
	mov	eax, esi
	shr	eax, 1
	push	edi
	sub	ecx, eax
	xor	edi, edi
	cmp	ecx, esi
	lea	edx, DWORD PTR [eax+esi]
	cmovb	edx, edi
; Line 1609
	cmp	edx, DWORD PTR __Count$[esp+4]
	pop	edi
	cmovb	edx, DWORD PTR __Count$[esp]
; Line 1611
	mov	eax, edx
	pop	esi
; Line 1612
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1601
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1274
	push	esi
	mov	esi, ecx
	push	edi
; Line 1275
	mov	edi, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [esi+4]
	cmp	edi, eax
	jae	SHORT $LN2@push_back
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN2@push_back
; Line 1277
	sub	edi, ecx
	sar	edi, 2
; Line 1278
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back
; Line 1279
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN4@push_back:
; Line 1281
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN205@push_back
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+edi*4]
; Line 1290
	mov	DWORD PTR [ecx], eax
; Line 1292
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 1294
	ret	4
$LN2@push_back:
; Line 1287
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back
; Line 1288
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN5@push_back:
; Line 1290
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN205@push_back
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
$LN205@push_back:
; Line 1292
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 1294
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1240
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 1241
	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1184
	mov	eax, 1073741823				; 3fffffffH
; Line 1185
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1179
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 1180
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1047
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
; Line 1048
	ret	0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1042
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 1043
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 974
	push	esi
	mov	esi, ecx
; Line 975
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@vector
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	mov	DWORD PTR [esi], 0
	add	esp, 8
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi
; Line 976
	ret	0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 705
	mov	DWORD PTR [ecx], 0
; Line 707
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 319
	mov	eax, ecx
; Line 320
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 314
	mov	eax, ecx
; Line 315
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 299
	mov	eax, ecx
; Line 300
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 294
	mov	eax, ecx
; Line 295
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 480
	mov	DWORD PTR [ecx], 0
; Line 483
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 667
	lea	eax, DWORD PTR [ecx+8]
; Line 668
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 662
	lea	eax, DWORD PTR [ecx+8]
; Line 663
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 657
	lea	eax, DWORD PTR [ecx+4]
; Line 658
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 652
	lea	eax, DWORD PTR [ecx+4]
; Line 653
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 647
	mov	eax, ecx
; Line 648
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 642
	mov	eax, ecx
; Line 643
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 637
	mov	eax, ecx
; Line 638
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 632
	mov	eax, ecx
; Line 633
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 627
	mov	eax, ecx
; Line 628
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 622
	mov	eax, ecx
; Line 623
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 613
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 513
	mov	DWORD PTR [ecx], 0
; Line 515
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 932
	mov	eax, 1073741823				; 3fffffffH
; Line 933
	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 911
	push	DWORD PTR __Count$[esp-4]
	push	DWORD PTR __Ptr$[esp]
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
; Line 912
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 900
	jmp	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 860
	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 787
	mov	eax, 1073741823				; 3fffffffH
; Line 788
	ret	0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 669
	mov	eax, 1073741823				; 3fffffffH
; Line 670
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 645
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:
; Line 646
	ret	4
; Line 645
$LN4@allocate:
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:
	shl	eax, 2
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate
	lea	ecx, DWORD PTR [eax+35]
	cmp	ecx, eax
	ja	SHORT $LN8@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR [eax-4], ecx
; Line 646
	ret	4
$LN6@allocate:
; Line 645
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 640
	push	DWORD PTR __Count$[esp-4]
	push	DWORD PTR __Ptr$[esp]
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
; Line 641
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 625
	mov	eax, ecx
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 621
	mov	eax, ecx
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Orphan_range, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1813
	ret	8
?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ PROC	; std::vector<char,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1784
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1655
	push	esi
	mov	esi, ecx
; Line 1656
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy
; Line 1660
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
; Line 1662
	mov	DWORD PTR [esi], 0
; Line 1663
	mov	DWORD PTR [esi+4], 0
; Line 1664
	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi
; Line 1666
	ret	0
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reserve@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1645
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1646
	mov	ecx, DWORD PTR __Count$[esp+8]
	mov	ebx, DWORD PTR [edi+8]
	mov	eax, ebx
	mov	esi, DWORD PTR [edi+4]
	sub	eax, esi
	cmp	eax, ecx
	jae	SHORT $LN2@Reserve
; Line 1648
	mov	edx, DWORD PTR [edi]
	mov	eax, edx
	sub	eax, esi
	dec	eax
	cmp	eax, ecx
	jae	SHORT $LN3@Reserve
; Line 1649
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:
; Line 1650
	sub	ebx, edx
	sub	esi, edx
	add	esi, ecx
	mov	eax, ebx
	shr	eax, 1
	or	ecx, -1
	sub	ecx, eax
	push	ebp
	xor	ebp, ebp
	cmp	ecx, ebx
	lea	edx, DWORD PTR [eax+ebx]
	mov	ecx, edi
	cmovb	edx, ebp
	cmp	edx, esi
	cmovb	edx, esi
	push	edx
	call	?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reallocate
	pop	ebp
$LN2@Reserve:
; Line 1652
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Reallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1620
	push	ebx
	push	ebp
; Line 1621
	mov	ebp, DWORD PTR __Count$[esp+4]
	push	esi
	push	edi
	push	ebp
	mov	edi, ecx
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
; Line 1624
	mov	esi, DWORD PTR [edi]
	mov	ebx, eax
	mov	edx, DWORD PTR [edi+4]
	sub	edx, esi
	push	edx
	push	esi
	push	ebx
	call	DWORD PTR __imp__memmove
; Line 1630
	mov	ecx, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	mov	esi, DWORD PTR [edi+4]
	sub	esi, ecx
; Line 1631
	test	ecx, ecx
	je	SHORT $LN3@Reallocate
; Line 1634
	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, edi
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Reallocate:
; Line 1639
	lea	eax, DWORD PTR [ebx+ebp]
	mov	DWORD PTR [edi+8], eax
; Line 1640
	lea	eax, DWORD PTR [esi+ebx]
	mov	DWORD PTR [edi+4], eax
; Line 1641
	mov	DWORD PTR [edi], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1642
	ret	4
?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$vector@DV?$allocator@D@std@@@std@@IBE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@DV?$allocator@D@std@@@std@@IBE_NPBD@Z PROC ; std::vector<char,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1616
	mov	eax, DWORD PTR __Ptr$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1
; Line 1617
	ret	4
$LN3@Inside:
; Line 1616
	xor	al, al
; Line 1617
	ret	4
?_Inside@?$vector@DV?$allocator@D@std@@@std@@IBE_NPBD@Z ENDP ; std::vector<char,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z PROC ; std::vector<char,std::allocator<char> >::_Grow_to, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1604
	push	esi
; Line 1605
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, DWORD PTR [ecx]
; Line 1607
	or	ecx, -1
	mov	eax, esi
	shr	eax, 1
	push	edi
	sub	ecx, eax
	xor	edi, edi
	cmp	ecx, esi
	lea	edx, DWORD PTR [eax+esi]
	cmovb	edx, edi
; Line 1609
	cmp	edx, DWORD PTR __Count$[esp+4]
	pop	edi
	cmovb	edx, DWORD PTR __Count$[esp]
; Line 1611
	mov	eax, edx
	pop	esi
; Line 1612
	ret	4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ENDP ; std::vector<char,std::allocator<char> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1601
	ret	8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@DV?$allocator@D@std@@@std@@QAEXABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@DV?$allocator@D@std@@@std@@QAEXABD@Z PROC ; std::vector<char,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1274
	push	esi
	mov	esi, ecx
	push	edi
; Line 1275
	mov	edi, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [esi+4]
	cmp	edi, eax
	jae	SHORT $LN2@push_back
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN2@push_back
; Line 1277
	sub	edi, ecx
; Line 1278
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back
; Line 1279
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reserve
$LN4@push_back:
; Line 1281
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN205@push_back
	mov	eax, DWORD PTR [esi]
	mov	al, BYTE PTR [edi+eax]
; Line 1290
	mov	BYTE PTR [ecx], al
; Line 1292
	inc	DWORD PTR [esi+4]
	pop	edi
	pop	esi
; Line 1294
	ret	4
$LN2@push_back:
; Line 1287
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back
; Line 1288
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reserve
$LN5@push_back:
; Line 1290
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN205@push_back
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR [ecx], al
$LN205@push_back:
; Line 1292
	inc	DWORD PTR [esi+4]
	pop	edi
	pop	esi
; Line 1294
	ret	4
?push_back@?$vector@DV?$allocator@D@std@@@std@@QAEXABD@Z ENDP ; std::vector<char,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z PROC	; std::vector<char,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1240
	mov	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR __Pos$[esp-4]
; Line 1241
	ret	4
??A?$vector@DV?$allocator@D@std@@@std@@QAEAADI@Z ENDP	; std::vector<char,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1184
	or	eax, -1
; Line 1185
	ret	0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1179
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
; Line 1180
	ret	0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unused_capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::_Unused_capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1047
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
; Line 1048
	ret	0
?_Unused_capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 1042
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1043
	ret	0
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 974
	push	esi
	mov	esi, ecx
; Line 975
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@vector
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi
; Line 976
	ret	0
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 705
	mov	DWORD PTR [ecx], 0
; Line 707
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 319
	mov	eax, ecx
; Line 320
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 314
	mov	eax, ecx
; Line 315
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 299
	mov	eax, ecx
; Line 300
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 294
	mov	eax, ecx
; Line 295
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 480
	mov	DWORD PTR [ecx], 0
; Line 483
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 667
	lea	eax, DWORD PTR [ecx+8]
; Line 668
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myend, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 662
	lea	eax, DWORD PTR [ecx+8]
; Line 663
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 657
	lea	eax, DWORD PTR [ecx+4]
; Line 658
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Mylast, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 652
	lea	eax, DWORD PTR [ecx+4]
; Line 653
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 647
	mov	eax, ecx
; Line 648
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 642
	mov	eax, ecx
; Line 643
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 637
	mov	eax, ecx
; Line 638
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 632
	mov	eax, ecx
; Line 633
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 627
	mov	eax, ecx
; Line 628
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 622
	mov	eax, ecx
; Line 623
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 613
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; Line 513
	mov	DWORD PTR [ecx], 0
; Line 515
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	4
??0?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 993
	push	esi
; Line 994
	mov	esi, DWORD PTR __Ostr$[esp]
	push	10					; 0000000aH
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, esi
	call	DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	movzx	ecx, al
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
; Line 995
	mov	ecx, esi
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
; Line 996
	mov	eax, esi
	pop	esi
; Line 997
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -36						; size = 8
__Pad$ = -36						; size = 8
$T2 = -28						; size = 1
__State$ = -24						; size = 4
__Count$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
$T3 = 12						; size = 1
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
; Line 782
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 786
	mov	eax, DWORD PTR __Val$[ebp]
	xor	edi, edi
	mov	DWORD PTR __State$[ebp], edi
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN26@operator
	xor	ecx, ecx
	jmp	SHORT $LN121@operator
$LN26@operator:
	mov	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
$LL108@operator:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL108@operator
	sub	ecx, edx
$LN121@operator:
; Line 787
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR __Count$1$[ebp], ecx
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax+edx+36]
	mov	esi, DWORD PTR [eax+edx+32]
	test	ebx, ebx
	jl	SHORT $LN17@operator
	jg	SHORT $LN110@operator
	test	esi, esi
	je	SHORT $LN17@operator
	test	ebx, ebx
	jl	SHORT $LN17@operator
	jg	SHORT $LN110@operator
	cmp	esi, ecx
	jbe	SHORT $LN17@operator
$LN110@operator:
	sub	esi, ecx
	sbb	ebx, edi
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR __Pad$[ebp], xmm0
	mov	ebx, DWORD PTR __Pad$[ebp+4]
	mov	esi, DWORD PTR __Pad$[ebp]
$LN18@operator:
; Line 789
	mov	ecx, DWORD PTR [eax+edx+56]
	mov	DWORD PTR __Ok$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN39@operator
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Ostr$[ebp]
$LN39@operator:
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+edx+12], 0
	jne	SHORT $LN35@operator
	mov	ecx, DWORD PTR [eax+edx+60]
	test	ecx, ecx
	je	SHORT $LN35@operator
	cmp	ecx, edx
	je	SHORT $LN35@operator
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	mov	edx, DWORD PTR __Ostr$[ebp]
$LN35@operator:
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+edx+12], 0
	sete	al
	mov	BYTE PTR __Ok$[ebp+4], al
	mov	DWORD PTR __$EHRec$[ebp+12], 1
; Line 791
	test	al, al
	jne	SHORT $LN8@operator
; Line 792
	mov	edi, 4
; Line 793
	jmp	$LN22@operator
$LN8@operator:
; Line 796
	mov	eax, DWORD PTR [ecx+edx+20]
	and	eax, 448				; 000001c0H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	eax, 64					; 00000040H
	je	SHORT $LN105@operator
$LL4@operator:
; Line 797
	test	ebx, ebx
	jl	SHORT $LN3@operator
	jg	SHORT $LN111@operator
	test	esi, esi
	je	SHORT $LN3@operator
$LN111@operator:
; Line 798
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	al, BYTE PTR [ecx+edx+64]
	mov	ecx, DWORD PTR [ecx+edx+56]
	mov	BYTE PTR $T2[ebp], al
	push	DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
; Line 802
	mov	edx, DWORD PTR __Ostr$[ebp]
	cmp	eax, -1
	sete	al
	test	al, al
	je	SHORT $LN2@operator
; Line 801
	or	edi, 4
	mov	DWORD PTR __State$[ebp], edi
$LN3@operator:
; Line 806
	test	edi, edi
	jne	SHORT $LN6@operator
$LN105@operator:
	mov	eax, DWORD PTR [edx]
	push	0
	push	DWORD PTR __Count$1$[ebp]
	mov	eax, DWORD PTR [eax+4]
	push	DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax+edx+56]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	eax, DWORD PTR __Count$1$[ebp]
	jne	SHORT $LN112@operator
	test	edx, edx
	jne	SHORT $LN112@operator
$LL114@operator:
; Line 810
	test	ebx, ebx
	jl	SHORT $LN118@operator
	jg	SHORT $LN113@operator
	test	esi, esi
	je	SHORT $LN118@operator
$LN113@operator:
; Line 811
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	add	ecx, eax
	mov	al, BYTE PTR [ecx+64]
	mov	ecx, DWORD PTR [ecx+56]
	mov	BYTE PTR $T3[ebp], al
	push	DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	eax, -1
	sete	al
	test	al, al
	je	SHORT $LN5@operator
; Line 814
	or	edi, 4
; Line 815
	jmp	SHORT $LN118@operator
$LN2@operator:
; Line 797
	add	esi, -1
	adc	ebx, -1
	jmp	$LL4@operator
$LN5@operator:
; Line 810
	add	esi, -1
	adc	ebx, -1
	jmp	SHORT $LL114@operator
$LN112@operator:
; Line 807
	mov	edi, 4
$LN118@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
$LN6@operator:
; Line 817
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+edx+32], 0
	mov	DWORD PTR [eax+edx+36], 0
	jmp	SHORT $LN124@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:
; Line 818
	mov	edx, DWORD PTR __Ostr$[ebp]
	push	1
	push	4
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	mov	eax, $LN23@operator
	ret	0
$LN23@operator:
	mov	edi, DWORD PTR __State$[ebp]
	mov	edx, DWORD PTR __Ostr$[ebp]
$LN124@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
; Line 821
	mov	eax, DWORD PTR [edx]
	push	0
	push	edi
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
; Line 822
	mov	DWORD PTR __$EHRec$[ebp+12], 4
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	mov	esi, DWORD PTR __Ok$[ebp]
	test	al, al
	jne	SHORT $LN88@operator
	mov	ecx, esi
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN88@operator:
	mov	ecx, DWORD PTR [esi]
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+esi+56]
	test	ecx, ecx
	je	SHORT $LN115@operator
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+8]
$LN115@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
; Line 823
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$8:
	call	___std_terminate
	ret	0
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9:
	call	___std_terminate
	ret	0
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
$T2 = -192						; size = 16
$T3 = -176						; size = 16
$T4 = -160						; size = 16
$T5 = -144						; size = 40
$T6 = -128						; size = 24
$T7 = -128						; size = 24
$T8 = -104						; size = 12
_tmp$9 = -92						; size = 12
_tmp$10 = -80						; size = 20
$T11 = -60						; size = 20
$T12 = -60						; size = 20
_dx_$13 = -40						; size = 12
_dy_$14 = -28						; size = 12
_tmp$1$ = -16						; size = 4
_dxarg$15 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pp_$16 = 0						; size = 12
tv4314 = 12						; size = 8
tv4312 = 12						; size = 8
$T17 = 16						; size = 4
tv4512 = 16						; size = 4
tv4510 = 16						; size = 4
_pp_$2$ = 20						; size = 4
tv4501 = 24						; size = 4
_i$1$ = 28						; size = 4
_x_$18 = 32						; size = 12
__Count$1$ = 44						; size = 4
_yarg$19 = 44						; size = 4
tv4310 = 48						; size = 8
$T20 = 52						; size = 4
tv4518 = 52						; size = 4
tv4326 = 56						; size = 8
tv4324 = 56						; size = 8
tv4322 = 56						; size = 8
tv4320 = 56						; size = 8
tv4318 = 56						; size = 8
tv4316 = 56						; size = 8
_tmp$1$ = 60						; size = 4
_dyarg$21 = 60						; size = 4
__Count$1$ = 64						; size = 4
_color_$22 = 68						; size = 12
_y_$23 = 80						; size = 12
$T24 = 92						; size = 4
__Idx$1$ = 92						; size = 4
__Capacity$1$ = 96					; size = 4
__Count$1$ = 100					; size = 4
__Count$1$ = 104					; size = 4
__Idx$1$ = 104						; size = 4
tv4516 = 104						; size = 4
_xarg$25 = 104						; size = 4
$T26 = 108						; size = 4
__Idx$1$ = 108						; size = 4
__Idx$1$ = 108						; size = 4
tv4514 = 108						; size = 4
$T27 = 112						; size = 4
_carg$1$ = 118						; size = 1
_carg$28 = 119						; size = 1
_main	PROC						; COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 294
	push	ebp
	lea	ebp, DWORD PTR [esp-120]
	sub	esp, 120				; 00000078H
	push	-1
	push	__ehhandler$_main
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 303
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_07INEOAPOI@render?3?$AA@
	push	DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; Line 304
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	push	OFFSET ??_C@_0DM@HCPGPFHC@n?$DLoop?$DLraw?$DLdod?$DLrender_dod?$DLoop?$FLi?$FN?$DL@
	push	DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; Line 306
	mov	DWORD PTR $T27[ebp], 10000		; 00002710H
$LL4@main:
; Line 307
	xor	eax, eax
	xor	edx, edx
	mov	DWORD PTR _color_$22[ebp], edx
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR _color_$22[ebp+4], eax
	mov	DWORD PTR __Capacity$1$[ebp], eax
	mov	DWORD PTR _color_$22[ebp+8], eax
; Line 308
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	mov	DWORD PTR _x_$18[ebp], eax
	mov	DWORD PTR $T24[ebp], ebx
	mov	DWORD PTR _x_$18[ebp+4], ebx
	mov	DWORD PTR __Count$1$[ebp], eax
	mov	DWORD PTR _x_$18[ebp+8], eax
	mov	DWORD PTR _y_$23[ebp], ebx
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR _y_$23[ebp+4], eax
	mov	DWORD PTR __Count$1$[ebp], eax
	mov	DWORD PTR _y_$23[ebp+8], eax
	mov	DWORD PTR _dx_$13[ebp], ebx
	mov	DWORD PTR _dx_$13[ebp+4], ebx
	mov	DWORD PTR __Count$1$[ebp], eax
	mov	DWORD PTR _dx_$13[ebp+8], eax
	mov	DWORD PTR _dy_$14[ebp], ebx
	mov	DWORD PTR _dy_$14[ebp+4], ebx
	mov	DWORD PTR __Count$1$[ebp], eax
	mov	DWORD PTR _dy_$14[ebp+8], eax
; Line 309
	xor	edi, edi
	mov	DWORD PTR _pp_$2$[ebp], eax
	xor	esi, esi
	mov	DWORD PTR _pp_$16[ebp], edi
	mov	DWORD PTR _pp_$16[ebp+4], esi
	mov	DWORD PTR _pp_$16[ebp+8], eax
; Line 311
	xor	ecx, ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	DWORD PTR _i$1$[ebp], ecx
	cmp	DWORD PTR $T27[ebp], ecx
	jbe	$LN6@main
; Line 307
	mov	DWORD PTR tv4501[ebp], ecx
	npad	6
$LL7@main:
; Line 312
	mov	eax, -858993459				; cccccccdH
; Line 313
	mov	DWORD PTR _xarg$25[ebp], ecx
	mul	ecx
	shr	edx, 2
	mov	al, dl
	shl	dl, 2
	add	al, dl
	mov	dl, cl
	sub	dl, al
	mov	eax, DWORD PTR tv4501[ebp]
	mov	DWORD PTR _yarg$19[ebp], eax
	mov	eax, -858993459				; cccccccdH
	mov	BYTE PTR _carg$1$[ebp], dl
	mov	BYTE PTR _carg$28[ebp], dl
	mul	ecx
	shr	edx, 4
	lea	eax, DWORD PTR [edx+edx*4]
	shl	eax, 2
	sub	ecx, eax
	mov	eax, -858993459				; cccccccdH
	mul	DWORD PTR _i$1$[ebp]
	mov	DWORD PTR _dxarg$15[ebp], ecx
	shr	edx, 3
; Line 314
	mov	DWORD PTR $T12[ebp+12], ecx
	lea	ecx, DWORD PTR $T12[ebp]
	lea	eax, DWORD PTR [edx+edx*4]
	mov	edx, DWORD PTR _i$1$[ebp]
	add	eax, eax
	mov	DWORD PTR $T26[ebp], edx
	sub	DWORD PTR $T26[ebp], eax
	mov	eax, DWORD PTR $T26[ebp]
	mov	DWORD PTR _dyarg$21[ebp], eax
	mov	al, BYTE PTR _carg$1$[ebp]
	mov	BYTE PTR $T12[ebp], al
	mov	eax, DWORD PTR tv4501[ebp]
	mov	DWORD PTR $T12[ebp+8], eax
	mov	eax, DWORD PTR $T26[ebp]
	mov	DWORD PTR $T12[ebp+4], edx
	mov	DWORD PTR $T12[ebp+16], eax
	cmp	ecx, esi
	jae	SHORT $LN108@main
	cmp	edi, ecx
	ja	SHORT $LN108@main
	sub	ecx, edi
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR __Idx$1$[ebp], eax
	cmp	esi, DWORD PTR _pp_$2$[ebp]
	jne	SHORT $LN110@main
	push	1
	lea	ecx, DWORD PTR _pp_$16[ebp]
	call	?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
	mov	eax, DWORD PTR _pp_$16[ebp+8]
	mov	esi, DWORD PTR _pp_$16[ebp+4]
	mov	edi, DWORD PTR _pp_$16[ebp]
	mov	DWORD PTR _pp_$2$[ebp], eax
	mov	eax, DWORD PTR __Idx$1$[ebp]
$LN110@main:
	lea	eax, DWORD PTR [eax+eax*4]
	test	esi, esi
	je	SHORT $LN317@main
	movups	xmm0, XMMWORD PTR [edi+eax*4]
	movups	XMMWORD PTR [esi], xmm0
	mov	eax, DWORD PTR [edi+eax*4+16]
	jmp	SHORT $LN2619@main
$LN108@main:
	cmp	esi, DWORD PTR _pp_$2$[ebp]
	jne	SHORT $LN111@main
	push	1
	lea	ecx, DWORD PTR _pp_$16[ebp]
	call	?_Reserve@?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@IAEXI@Z ; std::vector<plain_particle,std::allocator<plain_particle> >::_Reserve
	mov	eax, DWORD PTR _pp_$16[ebp+8]
	mov	esi, DWORD PTR _pp_$16[ebp+4]
	mov	edi, DWORD PTR _pp_$16[ebp]
	mov	DWORD PTR _pp_$2$[ebp], eax
	mov	eax, DWORD PTR $T26[ebp]
$LN111@main:
	test	esi, esi
	je	SHORT $LN317@main
	movups	xmm0, XMMWORD PTR $T12[ebp]
	movups	XMMWORD PTR [esi], xmm0
$LN2619@main:
	mov	DWORD PTR [esi+16], eax
$LN317@main:
; Line 315
	mov	ecx, DWORD PTR $T17[ebp]
	lea	eax, DWORD PTR _carg$28[ebp]
	add	esi, 20					; 00000014H
	mov	DWORD PTR _pp_$16[ebp+4], esi
	cmp	eax, ecx
	jae	SHORT $LN334@main
	mov	edx, eax
	mov	eax, DWORD PTR _color_$22[ebp]
	cmp	eax, edx
	ja	SHORT $LN334@main
	sub	edx, eax
	mov	DWORD PTR __Idx$1$[ebp], edx
	mov	edx, DWORD PTR __Capacity$1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN401@main
	mov	eax, edx
	sub	eax, ecx
	cmp	eax, 1
	jae	SHORT $LN2613@main
	sub	ecx, DWORD PTR _color_$22[ebp]
	or	eax, -1
	sub	eax, ecx
	cmp	eax, 1
	jb	$LN2596@main
	sub	edx, DWORD PTR _color_$22[ebp]
	lea	ebx, DWORD PTR [ecx+1]
	mov	eax, edx
	mov	DWORD PTR __Capacity$1$[ebp], edx
	shr	eax, 1
	or	ecx, -1
	sub	ecx, eax
	mov	DWORD PTR tv4510[ebp], 0
	add	edx, eax
	cmp	ecx, DWORD PTR __Capacity$1$[ebp]
	lea	ecx, DWORD PTR _color_$22[ebp]
	cmovb	edx, DWORD PTR tv4510[ebp]
	cmp	edx, ebx
	cmovb	edx, ebx
	push	edx
	call	?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reallocate
	mov	eax, DWORD PTR _color_$22[ebp+8]
	mov	ecx, DWORD PTR _color_$22[ebp+4]
	mov	ebx, DWORD PTR $T24[ebp]
	mov	DWORD PTR __Capacity$1$[ebp], eax
$LN2613@main:
	mov	eax, DWORD PTR _color_$22[ebp]
$LN401@main:
	test	ecx, ecx
	je	SHORT $LN802@main
	mov	edx, DWORD PTR __Idx$1$[ebp]
	mov	al, BYTE PTR [eax+edx]
	jmp	SHORT $LN2620@main
$LN334@main:
	mov	edx, DWORD PTR __Capacity$1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN624@main
	mov	eax, edx
	sub	eax, ecx
	cmp	eax, 1
	jae	SHORT $LN624@main
	sub	ecx, DWORD PTR _color_$22[ebp]
	or	eax, -1
	sub	eax, ecx
	cmp	eax, 1
	jb	$LN2596@main
	sub	edx, DWORD PTR _color_$22[ebp]
	lea	ebx, DWORD PTR [ecx+1]
	mov	eax, edx
	mov	DWORD PTR __Capacity$1$[ebp], edx
	shr	eax, 1
	or	ecx, -1
	sub	ecx, eax
	mov	DWORD PTR tv4512[ebp], 0
	add	edx, eax
	cmp	ecx, DWORD PTR __Capacity$1$[ebp]
	lea	ecx, DWORD PTR _color_$22[ebp]
	cmovb	edx, DWORD PTR tv4512[ebp]
	cmp	edx, ebx
	cmovb	edx, ebx
	push	edx
	call	?_Reallocate@?$vector@DV?$allocator@D@std@@@std@@IAEXI@Z ; std::vector<char,std::allocator<char> >::_Reallocate
	mov	eax, DWORD PTR _color_$22[ebp+8]
	mov	ecx, DWORD PTR _color_$22[ebp+4]
	mov	ebx, DWORD PTR $T24[ebp]
	mov	DWORD PTR __Capacity$1$[ebp], eax
$LN624@main:
	test	ecx, ecx
	je	SHORT $LN802@main
	mov	al, BYTE PTR _carg$1$[ebp]
$LN2620@main:
	mov	BYTE PTR [ecx], al
$LN802@main:
	inc	ecx
; Line 316
	lea	eax, DWORD PTR _xarg$25[ebp]
	mov	DWORD PTR _color_$22[ebp+4], ecx
	mov	DWORD PTR $T17[ebp], ecx
	mov	ecx, DWORD PTR _x_$18[ebp]
	cmp	eax, ebx
	jae	$LN820@main
	cmp	ecx, eax
	ja	SHORT $LN820@main
	mov	edx, DWORD PTR __Count$1$[ebp]
	sub	eax, ecx
	sar	eax, 2
	mov	DWORD PTR __Idx$1$[ebp], eax
	cmp	ebx, edx
	jne	SHORT $LN887@main
	mov	eax, edx
	sub	eax, ebx
	sar	eax, 2
	cmp	eax, 1
	jae	SHORT $LN2616@main
	sub	ebx, ecx
	mov	eax, 1073741823				; 3fffffffH
	sar	ebx, 2
	sub	eax, ebx
	cmp	eax, 1
	jb	$LN2596@main
	sub	edx, ecx
	mov	DWORD PTR tv4514[ebp], 0
	sar	edx, 2
	inc	ebx
	mov	eax, edx
	mov	DWORD PTR __Count$1$[ebp], edx
	shr	eax, 1
	mov	ecx, 1073741823				; 3fffffffH
	sub	ecx, eax
	add	edx, eax
	cmp	ecx, DWORD PTR __Count$1$[ebp]
	lea	ecx, DWORD PTR _x_$18[ebp]
	cmovb	edx, DWORD PTR tv4514[ebp]
	cmp	edx, ebx
	cmovb	edx, ebx
	push	edx
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
	mov	eax, DWORD PTR _x_$18[ebp+8]
	mov	ebx, DWORD PTR _x_$18[ebp+4]
	mov	ecx, DWORD PTR _x_$18[ebp]
	mov	DWORD PTR __Count$1$[ebp], eax
$LN2616@main:
	mov	eax, DWORD PTR __Idx$1$[ebp]
$LN887@main:
	test	ebx, ebx
	je	SHORT $LN1288@main
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ebx], eax
	jmp	SHORT $LN1288@main
$LN820@main:
	mov	edx, DWORD PTR __Count$1$[ebp]
	cmp	ebx, edx
	jne	SHORT $LN1110@main
	mov	eax, edx
	sub	eax, ebx
	sar	eax, 2
	cmp	eax, 1
	jae	SHORT $LN1110@main
	sub	ebx, ecx
	mov	eax, 1073741823				; 3fffffffH
	sar	ebx, 2
	sub	eax, ebx
	cmp	eax, 1
	jb	$LN2596@main
	sub	edx, ecx
	mov	DWORD PTR tv4516[ebp], 0
	sar	edx, 2
	inc	ebx
	mov	eax, edx
	mov	DWORD PTR __Count$1$[ebp], edx
	shr	eax, 1
	mov	ecx, 1073741823				; 3fffffffH
	sub	ecx, eax
	add	edx, eax
	cmp	ecx, DWORD PTR __Count$1$[ebp]
	lea	ecx, DWORD PTR _x_$18[ebp]
	cmovb	edx, DWORD PTR tv4516[ebp]
	cmp	edx, ebx
	cmovb	edx, ebx
	push	edx
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
	mov	eax, DWORD PTR _x_$18[ebp+8]
	mov	ebx, DWORD PTR _x_$18[ebp+4]
	mov	DWORD PTR __Count$1$[ebp], eax
$LN1110@main:
	test	ebx, ebx
	je	SHORT $LN1288@main
	mov	edx, DWORD PTR _i$1$[ebp]
	mov	DWORD PTR [ebx], edx
$LN1288@main:
; Line 317
	mov	ecx, DWORD PTR $T20[ebp]
	lea	eax, DWORD PTR _yarg$19[ebp]
	add	ebx, 4
	mov	DWORD PTR _x_$18[ebp+4], ebx
	mov	DWORD PTR $T24[ebp], ebx
	cmp	eax, ecx
	jae	$LN1305@main
	mov	edx, eax
	mov	eax, DWORD PTR _y_$23[ebp]
	cmp	eax, edx
	ja	$LN1305@main
	sub	edx, eax
	sar	edx, 2
	mov	DWORD PTR __Idx$1$[ebp], edx
	mov	edx, DWORD PTR __Count$1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1372@main
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 2
	cmp	eax, 1
	jae	SHORT $LN2615@main
	sub	ecx, DWORD PTR _y_$23[ebp]
	mov	eax, 1073741823				; 3fffffffH
	sar	ecx, 2
	sub	eax, ecx
	cmp	eax, 1
	jb	$LN2596@main
	sub	edx, DWORD PTR _y_$23[ebp]
	lea	ebx, DWORD PTR [ecx+1]
	sar	edx, 2
	mov	ecx, 1073741823				; 3fffffffH
	mov	eax, edx
	mov	DWORD PTR __Count$1$[ebp], edx
	shr	eax, 1
	sub	ecx, eax
	mov	DWORD PTR tv4518[ebp], 0
	add	edx, eax
	cmp	ecx, DWORD PTR __Count$1$[ebp]
	lea	ecx, DWORD PTR _y_$23[ebp]
	cmovb	edx, DWORD PTR tv4518[ebp]
	cmp	edx, ebx
	cmovb	edx, ebx
	push	edx
	call	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
	mov	eax, DWORD PTR _y_$23[ebp+8]
	mov	ecx, DWORD PTR _y_$23[ebp+4]
	mov	ebx, DWORD PTR $T24[ebp]
	mov	DWORD PTR __Count$1$[ebp], eax
$LN2615@main:
	mov	eax, DWORD PTR _y_$23[ebp]
$LN1372@main:
	test	ecx, ecx
	je	SHORT $LN1641@main
	mov	edx, DWORD PTR __Idx$1$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN2621@main
$LN1305@main:
	cmp	ecx, DWORD PTR __Count$1$[ebp]
	jne	SHORT $LN1308@main
	push	1
	lea	ecx, DWORD PTR _y_$23[ebp]
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
	mov	eax, DWORD PTR _y_$23[ebp+8]
	mov	ecx, DWORD PTR _y_$23[ebp+4]
	mov	DWORD PTR __Count$1$[ebp], eax
$LN1308@main:
	test	ecx, ecx
	je	SHORT $LN1641@main
	mov	eax, DWORD PTR tv4501[ebp]
$LN2621@main:
	mov	DWORD PTR [ecx], eax
$LN1641@main:
	add	ecx, 4
; Line 318
	lea	eax, DWORD PTR _dxarg$15[ebp]
	mov	DWORD PTR _y_$23[ebp+4], ecx
	mov	DWORD PTR $T20[ebp], ecx
	lea	ecx, DWORD PTR _dx_$13[ebp]
	push	eax
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Line 319
	lea	eax, DWORD PTR _dyarg$21[ebp]
	push	eax
	lea	ecx, DWORD PTR _dy_$14[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
	mov	ecx, DWORD PTR _i$1$[ebp]
	add	DWORD PTR tv4501[ebp], 2
	inc	ecx
	mov	DWORD PTR _i$1$[ebp], ecx
	cmp	ecx, DWORD PTR $T27[ebp]
	jb	$LL7@main
; Line 311
	mov	eax, DWORD PTR _dx_$13[ebp+8]
	mov	edx, DWORD PTR _color_$22[ebp]
	mov	DWORD PTR __Count$1$[ebp], eax
	mov	eax, DWORD PTR _dy_$14[ebp+8]
	mov	DWORD PTR __Count$1$[ebp], eax
$LN6@main:
; Line 328
	mov	ecx, DWORD PTR $T27[ebp]
; Line 331
	mov	eax, DWORD PTR _x_$18[ebp]
	mov	DWORD PTR $T11[ebp+4], eax
	mov	eax, DWORD PTR _y_$23[ebp]
	mov	DWORD PTR $T11[ebp+8], eax
	lea	ebx, DWORD PTR [ecx-1]
	mov	eax, DWORD PTR _dx_$13[ebp]
	add	ebx, edx
	mov	DWORD PTR $T11[ebp], edx
; Line 332
	mov	edx, DWORD PTR _dy_$14[ebp]
	mov	DWORD PTR $T11[ebp+12], eax
	mov	eax, DWORD PTR _color_$22[ebp]
	movups	xmm0, XMMWORD PTR $T11[ebp]
	add	eax, ecx
	shl	ecx, 2
	add	edx, ecx
	mov	DWORD PTR _tmp$1$[ebp], edx
; Line 333
	mov	edx, DWORD PTR _color_$22[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	edx, DWORD PTR _x_$18[ebp]
	movups	XMMWORD PTR _tmp$10[ebp], xmm0
	add	DWORD PTR _tmp$10[ebp+4], ecx
	add	DWORD PTR _tmp$10[ebp+8], ecx
	add	DWORD PTR _tmp$10[ebp+12], ecx
	mov	DWORD PTR $T8[ebp+4], edx
; Line 334
	movq	xmm0, QWORD PTR $T8[ebp]
	mov	edx, DWORD PTR _y_$23[ebp]
	movq	QWORD PTR _tmp$9[ebp], xmm0
	add	edx, ecx
	add	DWORD PTR _tmp$9[ebp+4], ecx
; Line 336
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	push	DWORD PTR $T27[ebp]
	mov	DWORD PTR _tmp$10[ebp], eax
	mov	DWORD PTR _tmp$9[ebp], eax
	mov	DWORD PTR _tmp$1$[ebp], edx
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 337
	mov	eax, DWORD PTR $T27[ebp]
	push	esi
	push	edi
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv4310[ebp], xmm0
	call	??$measure@V<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@@YANV<lambda_3c38aff788b9781cf78ca5a917f16ae4>@@@Z ; measure<<lambda_3c38aff788b9781cf78ca5a917f16ae4> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4312[ebp]
	movsd	xmm0, QWORD PTR tv4312[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 338
	mov	eax, DWORD PTR _y_$23[ebp]
	sub	esp, 8
	mov	esi, DWORD PTR _color_$22[ebp]
	mov	DWORD PTR $T4[ebp+4], ebx
	mov	ebx, DWORD PTR _x_$18[ebp]
	mov	DWORD PTR $T4[ebp+12], eax
	mov	eax, esp
	mov	DWORD PTR $T4[ebp], esi
	mov	DWORD PTR $T4[ebp+8], ebx
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@@YANV<lambda_0e8cd367240c9f8b6afbbc7d85139419>@@@Z ; measure<<lambda_0e8cd367240c9f8b6afbbc7d85139419> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4314[ebp]
	movsd	xmm0, QWORD PTR tv4314[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 339
	movups	xmm0, XMMWORD PTR _tmp$10[ebp]
	mov	eax, DWORD PTR _dy_$14[ebp]
	sub	esp, 32					; 00000020H
	mov	DWORD PTR $T5[ebp+16], eax
	mov	eax, DWORD PTR _tmp$1$[ebp]
	movups	XMMWORD PTR $T5[ebp+20], xmm0
	mov	DWORD PTR $T5[ebp+36], eax
	mov	eax, esp
	movups	xmm0, XMMWORD PTR $T11[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR $T5[ebp+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movq	xmm0, QWORD PTR $T5[ebp+32]
	movq	QWORD PTR [eax+32], xmm0
	call	??$measure@V<lambda_4bb02fb8e2d5361150321278473362ff>@@@@YANV<lambda_4bb02fb8e2d5361150321278473362ff>@@@Z ; measure<<lambda_4bb02fb8e2d5361150321278473362ff> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 40					; 00000028H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4316[ebp]
	movsd	xmm0, QWORD PTR tv4316[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 340
	movq	xmm0, QWORD PTR $T8[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR _y_$23[ebp]
	movq	QWORD PTR $T7[ebp], xmm0
	movq	xmm0, QWORD PTR _tmp$9[ebp]
	mov	DWORD PTR $T7[ebp+8], eax
	mov	eax, DWORD PTR _tmp$1$[ebp]
	mov	DWORD PTR $T7[ebp+20], eax
	mov	eax, esp
	movq	QWORD PTR $T7[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T7[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR $T7[ebp+16]
	movq	QWORD PTR [eax+16], xmm0
	call	??$measure@V<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@@YANV<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb>@@@Z ; measure<<lambda_fe4b9e6fc2b2fbcfeea78297fbfefccb> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4318[ebp]
	movsd	xmm0, QWORD PTR tv4318[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 341
	push	DWORD PTR $T27[ebp]
	push	edi
	call	??$measure@V<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@@YANV<lambda_ce14b79be95f650ececed4b3079e7cf8>@@@Z ; measure<<lambda_ce14b79be95f650ececed4b3079e7cf8> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4320[ebp]
	movsd	xmm0, QWORD PTR tv4320[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 342
	mov	eax, DWORD PTR _y_$23[ebp]
	sub	esp, 8
	mov	DWORD PTR $T3[ebp+8], eax
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR $T3[ebp+12], eax
	mov	eax, esp
	mov	DWORD PTR $T3[ebp], esi
	mov	DWORD PTR $T3[ebp+4], ebx
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_a29049cf6153b725a6a331d7121b9876>@@@@YANV<lambda_a29049cf6153b725a6a331d7121b9876>@@@Z ; measure<<lambda_a29049cf6153b725a6a331d7121b9876> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4322[ebp]
	movsd	xmm0, QWORD PTR tv4322[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 343
	mov	eax, DWORD PTR _dy_$14[ebp]
	sub	esp, 16					; 00000010H
	movups	xmm0, XMMWORD PTR $T11[ebp]
	mov	DWORD PTR $T6[ebp+16], eax
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR $T6[ebp+20], eax
	mov	eax, esp
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR $T6[ebp+16]
	movq	QWORD PTR [eax+16], xmm0
	call	??$measure@V<lambda_668201fb256ca3039b30842ebf04ef83>@@@@YANV<lambda_668201fb256ca3039b30842ebf04ef83>@@@Z ; measure<<lambda_668201fb256ca3039b30842ebf04ef83> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4324[ebp]
	movsd	xmm0, QWORD PTR tv4324[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
; Line 344
	mov	eax, DWORD PTR _y_$23[ebp]
	sub	esp, 8
	movq	xmm0, QWORD PTR $T8[ebp]
	mov	DWORD PTR $T2[ebp+8], eax
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR $T2[ebp+12], eax
	mov	eax, esp
	movq	QWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [eax], xmm0
	call	??$measure@V<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@@YANV<lambda_4c02ba5ef62215ee51f4e58ccd3418c3>@@@Z ; measure<<lambda_4c02ba5ef62215ee51f4e58ccd3418c3> >
	fdiv	QWORD PTR tv4310[ebp]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
	sub	esp, 8
	fmul	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR tv4326[ebp]
	movsd	xmm0, QWORD PTR tv4326[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; Line 345
	test	edi, edi
	je	SHORT $LN2018@main
	mov	ecx, DWORD PTR _pp_$2$[ebp]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, edi
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	push	eax
	push	edi
	call	??$_Deallocate@Vplain_particle@@@std@@YAXPAVplain_particle@@I@Z ; std::_Deallocate<plain_particle>
	add	esp, 8
	mov	DWORD PTR _pp_$16[ebp], 0
	mov	DWORD PTR _pp_$16[ebp+4], 0
	mov	DWORD PTR _pp_$16[ebp+8], 0
$LN2018@main:
	mov	ecx, DWORD PTR _dy_$14[ebp]
	test	ecx, ecx
	je	SHORT $LN2115@main
	mov	eax, DWORD PTR __Count$1$[ebp]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
	mov	DWORD PTR _dy_$14[ebp], 0
	mov	DWORD PTR _dy_$14[ebp+4], 0
	mov	DWORD PTR _dy_$14[ebp+8], 0
$LN2115@main:
	mov	ecx, DWORD PTR _dx_$13[ebp]
	test	ecx, ecx
	je	SHORT $LN2212@main
	mov	eax, DWORD PTR __Count$1$[ebp]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
	mov	DWORD PTR _dx_$13[ebp], 0
	mov	DWORD PTR _dx_$13[ebp+4], 0
	mov	DWORD PTR _dx_$13[ebp+8], 0
$LN2212@main:
	mov	ecx, DWORD PTR _y_$23[ebp]
	test	ecx, ecx
	je	SHORT $LN2309@main
	mov	eax, DWORD PTR __Count$1$[ebp]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	push	ecx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
	mov	DWORD PTR _y_$23[ebp], 0
	mov	DWORD PTR _y_$23[ebp+4], 0
	mov	DWORD PTR _y_$23[ebp+8], 0
$LN2309@main:
	test	ebx, ebx
	je	SHORT $LN2406@main
	mov	eax, DWORD PTR __Count$1$[ebp]
	sub	eax, ebx
	sar	eax, 2
	push	eax
	push	ebx
	call	??$_Deallocate@H@std@@YAXPAHI@Z		; std::_Deallocate<int>
	add	esp, 8
	mov	DWORD PTR _x_$18[ebp], 0
	mov	DWORD PTR _x_$18[ebp+4], 0
	mov	DWORD PTR _x_$18[ebp+8], 0
$LN2406@main:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	test	esi, esi
	je	SHORT $LN2@main
	mov	eax, DWORD PTR __Capacity$1$[ebp]
	lea	ecx, DWORD PTR _color_$22[ebp]
	sub	eax, esi
	push	eax
	push	esi
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
	mov	DWORD PTR _color_$22[ebp], 0
	mov	DWORD PTR _color_$22[ebp+4], 0
	mov	DWORD PTR _color_$22[ebp+8], 0
$LN2@main:
; Line 306
	mov	eax, DWORD PTR $T27[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	mov	DWORD PTR $T27[ebp], eax
	cmp	eax, 10000000				; 00989680H
	jbe	$LL4@main
; Line 346
	xor	eax, eax
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	lea	esp, DWORD PTR [ebp+120]
	pop	ebp
	ret	0
$LN2596@main:
; Line 315
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2622@main:
$LN2618@main:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
	lea	ecx, DWORD PTR _color_$22[ebp]
	jmp	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$_main$1:
	lea	ecx, DWORD PTR _x_$18[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$_main$2:
	lea	ecx, DWORD PTR _y_$23[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$_main$3:
	lea	ecx, DWORD PTR _dx_$13[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$_main$4:
	lea	ecx, DWORD PTR _dy_$14[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$_main$5:
	lea	ecx, DWORD PTR _pp_$16[ebp]
	jmp	??1?$vector@Vplain_particle@@V?$allocator@Vplain_particle@@@std@@@std@@QAE@XZ ; std::vector<plain_particle,std::allocator<plain_particle> >::~vector<plain_particle,std::allocator<plain_particle> >
__ehhandler$_main:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_main
	jmp	___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Ogtpy
;	COMDAT ?render@@YAHPADPAH1I@Z
_TEXT	SEGMENT
_itc$ = 8						; size = 4
_itx$ = 12						; size = 4
_ity$ = 16						; size = 4
_n$ = 20						; size = 4
?render@@YAHPADPAH1I@Z PROC				; render, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 268
	push	esi
	push	edi
; Line 270
	mov	edi, DWORD PTR _n$[esp+4]
	xor	eax, eax
	xor	esi, esi
	mov	DWORD PTR ?render_output@@3HA, eax
	test	edi, edi
	je	SHORT $LN3@render
	mov	edx, DWORD PTR _ity$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR _itx$[esp+8]
	push	ebp
	mov	ebp, DWORD PTR _itc$[esp+12]
	sub	ebx, edx
$LL4@render:
	movsx	ecx, BYTE PTR [esi+ebp]
	lea	edx, DWORD PTR [edx+4]
	add	ecx, DWORD PTR [ebx+edx-4]
	inc	esi
	add	ecx, DWORD PTR [edx-4]
	add	eax, ecx
	cmp	esi, edi
	jb	SHORT $LL4@render
	pop	ebp
	mov	DWORD PTR ?render_output@@3HA, eax
	pop	ebx
$LN3@render:
; Line 272
	pop	edi
	pop	esi
	ret	0
?render@@YAHPADPAH1I@Z ENDP				; render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?render@@YAHPAD0PAH1@Z
_TEXT	SEGMENT
_fc$ = 8						; size = 4
_lc$ = 12						; size = 4
_fx$ = 16						; size = 4
_fy$ = 20						; size = 4
?render@@YAHPAD0PAH1@Z PROC				; render, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 261
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _lc$[esp+4]
	xor	ecx, ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR _fc$[esp+12]
; Line 262
	xor	esi, esi
	sub	ebp, edi
	mov	DWORD PTR ?render_output@@3HA, esi
	xor	ebx, ebx
	cmp	edi, DWORD PTR _lc$[esp+12]
	cmova	ebp, ecx
; Line 263
	test	ebp, ebp
	je	SHORT $LN11@render
	mov	ecx, DWORD PTR _fx$[esp+12]
	mov	edx, DWORD PTR _fy$[esp+12]
	sub	ecx, edx
	mov	DWORD PTR _fx$[esp+12], ecx
$LL2@render:
	mov	ecx, DWORD PTR [ecx+edx]
	lea	edx, DWORD PTR [edx+4]
	movsx	eax, BYTE PTR [edi]
	lea	edi, DWORD PTR [edi+1]
	add	ecx, eax
	inc	ebx
	add	ecx, DWORD PTR [edx-4]
	add	esi, ecx
	mov	ecx, DWORD PTR _fx$[esp+12]
	cmp	ebx, ebp
	jne	SHORT $LL2@render
	mov	DWORD PTR ?render_output@@3HA, esi
$LN11@render:
	pop	edi
; Line 264
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 265
	ret	0
?render@@YAHPAD0PAH1@Z ENDP				; render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?render@plain_particle@@QBEXXZ
_TEXT	SEGMENT
?render@plain_particle@@QBEXXZ PROC			; plain_particle::render, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 180
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [ecx]
	add	eax, DWORD PTR ?render_output@@3HA
	add	edx, DWORD PTR [ecx+4]
	add	eax, edx
	mov	DWORD PTR ?render_output@@3HA, eax
; Line 181
	ret	0
?render@plain_particle@@QBEXXZ ENDP			; plain_particle::render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0plain_particle@@QAE@DHHHH@Z
_TEXT	SEGMENT
_color_$ = 8						; size = 1
_x_$ = 12						; size = 4
_y_$ = 16						; size = 4
_dx_$ = 20						; size = 4
_dy_$ = 24						; size = 4
??0plain_particle@@QAE@DHHHH@Z PROC			; plain_particle::plain_particle, COMDAT
; _this$ = ecx
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 175
	mov	al, BYTE PTR _color_$[esp-4]
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _x_$[esp-4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _y_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _dx_$[esp-4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _dy_$[esp-4]
	mov	DWORD PTR [ecx+16], eax
; Line 176
	mov	eax, ecx
	ret	20					; 00000014H
??0plain_particle@@QAE@DHHHH@Z ENDP			; plain_particle::plain_particle
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?do_render@@YAXHHD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_c$ = 16						; size = 1
?do_render@@YAXHHD@Z PROC				; do_render, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 159
	movsx	eax, BYTE PTR _c$[esp-4]
	add	eax, DWORD PTR _x$[esp-4]
	add	eax, DWORD PTR _y$[esp-4]
	add	DWORD PTR ?render_output@@3HA, eax
; Line 160
	ret	0
?do_render@@YAXHHD@Z ENDP				; do_render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z PROC ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 626
	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Right$[esp-4]
	sub	edx, DWORD PTR [eax]
	sbb	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 627
	ret	0
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ENDP ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?resume_timing@@YAXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
?resume_timing@@YAXXZ PROC				; resume_timing, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 51
	sub	esp, 8
; Line 52
	lea	eax, DWORD PTR $T1[esp+8]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR ?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR ?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4
	add	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	adc	DWORD PTR ?measure_start@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
; Line 53
	add	esp, 12					; 0000000cH
	ret	0
?resume_timing@@YAXXZ ENDP				; resume_timing
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pause_timing@@YAXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
?pause_timing@@YAXXZ PROC				; pause_timing, COMDAT
; File c:\users\manu343726\documents\joaquin-dod\dod_perf.cpp
; Line 46
	sub	esp, 8
; Line 47
	lea	eax, DWORD PTR $T1[esp+8]
	push	eax
	call	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A, ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?measure_pause@@3V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@A+4, eax
; Line 48
	add	esp, 12					; 0000000cH
	ret	0
?pause_timing@@YAXXZ ENDP				; pause_timing
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::count, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 131
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
; Line 132
	ret	0
?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QBENXZ
_TEXT	SEGMENT
?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QBENXZ PROC ; std::chrono::duration<double,std::ratio<1,1> >::count, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 131
	fld	QWORD PTR [ecx]
; Line 132
	ret	0
?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QBENXZ ENDP ; std::chrono::duration<double,std::ratio<1,1> >::count
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 112
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 114
	mov	eax, ecx
	ret	4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAEAAV012@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
_TEXT	SEGMENT
__Dur$ = 8						; size = 4
??Y?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAEAAV012@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 259
	mov	edx, DWORD PTR __Dur$[esp-4]
	mov	eax, DWORD PTR [edx]
	add	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	adc	DWORD PTR [ecx+4], eax
; Line 260
	mov	eax, ecx
; Line 261
	ret	4
??Y?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAEAAV012@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 254
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
; Line 255
	ret	4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 239
	mov	edx, DWORD PTR __Other$[esp-4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 241
	mov	eax, ecx
	ret	4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@XZ
_TEXT	SEGMENT
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@XZ PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 233
	mov	DWORD PTR [ecx], 0
; Line 236
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@XZ ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?zero@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@SA?AV123@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?zero@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@SA?AV123@XZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::zero, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 204
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 205
	ret	0
?zero@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@SA?AV123@XZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::zero
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 168
	mov	edx, DWORD PTR __Right$[esp-4]
	mov	eax, DWORD PTR [edx]
	add	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	adc	DWORD PTR [ecx+4], eax
; Line 169
	mov	eax, ecx
; Line 170
	ret	4
??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 131
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
; Line 132
	ret	0
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
_TEXT	SEGMENT
tv212 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ PROC ; std::chrono::steady_clock::now, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\chrono
; Line 740
	push	ecx
; Line 742
	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN2@now
	push	OFFSET ?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA, -1 ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
	jne	SHORT $LN2@now
	call	DWORD PTR __imp___Query_perf_frequency
	push	OFFSET ?$TSS0@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4HA ; TSS0<`template-parameter-2',std::chrono::steady_clock::ow,std::chrono::Usteady_clock::me_point,chrono::steady_clock::duration<__int64,std::ratio<1,1000000000> > >
	mov	DWORD PTR ?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB, eax
	mov	DWORD PTR ?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB+4, edx
	call	__Init_thread_footer
	add	esp, 4
$LN2@now:
; Line 743
	push	ebx
	push	ebp
	push	esi
	push	edi
	call	DWORD PTR __imp___Query_perf_counter
; Line 746
	mov	edi, DWORD PTR ?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB+4
	mov	esi, DWORD PTR ?_Freq@?1??now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@34@XZ@4_JB
	push	edi
	push	esi
	push	edx
	push	eax
	call	__alldvrm
	push	0
	push	1000000000				; 3b9aca00H
	push	ebx
	push	ecx
	mov	DWORD PTR tv212[esp+36], eax
	mov	ebp, edx
	call	__allmul
	push	edi
	push	esi
	push	edx
	push	eax
	call	__alldiv
	push	0
	push	1000000000				; 3b9aca00H
	push	ebp
	push	DWORD PTR tv212[esp+32]
	mov	esi, eax
	mov	edi, edx
	call	__allmul
; Line 747
	add	esi, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	adc	edi, edx
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 748
	pop	ecx
	ret	0
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ENDP ; std::chrono::steady_clock::now
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 932
	or	eax, -1
; Line 933
	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 911
	mov	ecx, DWORD PTR __Count$[esp-4]
	mov	eax, DWORD PTR __Ptr$[esp-4]
	cmp	ecx, -1
	jbe	SHORT $LN6@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@deallocate:
$LN6@deallocate:
	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN7@deallocate
	test	al, 31					; 0000001fH
	je	SHORT $LN8@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN8@deallocate:
	mov	ecx, DWORD PTR [eax-4]
	cmp	ecx, eax
	jb	SHORT $LN9@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN9@deallocate:
	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN10@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN10@deallocate:
	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN11@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN11@deallocate:
	mov	eax, ecx
$LN7@deallocate:
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
; Line 912
	ret	8
$LN16@deallocate:
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 900
	jmp	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 860
	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 787
	or	eax, -1
; Line 788
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 669
	or	eax, -1
; Line 670
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 645
	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:
; Line 646
	ret	4
; Line 645
$LN4@allocate:
	cmp	eax, -1
	jbe	SHORT $LN5@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:
	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate
	lea	ecx, DWORD PTR [eax+35]
	cmp	ecx, eax
	ja	SHORT $LN8@allocate
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:
	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR [eax-4], ecx
; Line 646
	ret	4
$LN6@allocate:
; Line 645
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 640
	mov	ecx, DWORD PTR __Count$[esp-4]
	mov	eax, DWORD PTR __Ptr$[esp-4]
	cmp	ecx, -1
	jbe	SHORT $LN4@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN14@deallocate:
$LN4@deallocate:
	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN5@deallocate
	test	al, 31					; 0000001fH
	je	SHORT $LN6@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN15@deallocate:
$LN6@deallocate:
	mov	ecx, DWORD PTR [eax-4]
	cmp	ecx, eax
	jb	SHORT $LN7@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN16@deallocate:
$LN7@deallocate:
	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN8@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@deallocate:
$LN8@deallocate:
	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN9@deallocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN9@deallocate:
	mov	eax, ecx
$LN5@deallocate:
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
; Line 641
	ret	8
$LN13@deallocate:
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 625
	mov	eax, ecx
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; Line 621
	mov	eax, ecx
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 59
	xor	eax, eax
; Line 60
	ret	0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 55
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; Line 44
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; Line 606
	or	eax, -1
; Line 607
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; Line 595
	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 596
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; Line 523
	mov	eax, DWORD PTR __First$[esp-4]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN3@length
	xor	eax, eax
; Line 525
	ret	0
$LN3@length:
; Line 523
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL5@length:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@length
	sub	eax, edx
; Line 525
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
; Line 89
	mov	eax, DWORD PTR __Where$[esp-4]
; Line 90
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
